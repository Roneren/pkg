// Copyright 2015-2016, Cyrill @ Schumacher.fm and the CoreStore contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package config_test

// Do not edit please. This file was autogenerated from the system.xml files from Magento2.
// This slice contains every configuration option. Some of these options do not make sense
// for CoreStore but are here to use for testing and benchmarking.

import (
	"github.com/corestoreio/csfw/config/element"
	"github.com/corestoreio/csfw/config/path"
	"github.com/corestoreio/csfw/storage/text"
	"github.com/corestoreio/csfw/store/scope"
)

var packageAllConfiguration = element.MustNewConfigurationMerge(
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("adminnotification"),
				Label:     text.Chars(`Notifications`),
				SortOrder: 250,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/adminnotification/use_https`,
						ID:        path.NewRoute("use_https"),
						Label:     text.Chars(`Use HTTPS to Get Feed`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},

					&element.Field{
						// Path: `system/adminnotification/frequency`,
						ID:        path.NewRoute("frequency"),
						Label:     text.Chars(`Update Frequency`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   true,
					},

					&element.Field{
						// Path: `system/adminnotification/last_update`,
						ID:        path.NewRoute("last_update"),
						Label:     text.Chars(`Last Update`),
						Type:      element.TypeLabel,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   0,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("adminnotification"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/adminnotification/feed_url`,
						ID:      path.NewRoute("feed_url"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `notifications.magentocommerce.com/magento2/community/notifications.rss`,
					},

					&element.Field{
						// Path: `system/adminnotification/popup_url`,
						ID:      path.NewRoute("popup_url"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `widgets.magentocommerce.com/notificationPopup`,
					},

					&element.Field{
						// Path: `system/adminnotification/severity_icons_url`,
						ID:      path.NewRoute("severity_icons_url"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `widgets.magentocommerce.com/%s/%s.gif`,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("advanced"),
		Label:     text.Chars("Advanced"),
		SortOrder: 910,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("modules_disable_output"),
				Label:     text.Chars(`Disable Modules Output`),
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields:    element.FieldSlice{},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("trans_email"),
		Label:     text.Chars("Store Email Addresses"),
		SortOrder: 90,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("ident_custom1"),
				Label:     text.Chars(`Custom Email 1`),
				SortOrder: 4,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `trans_email/ident_custom1/email`,
						ID:        path.NewRoute("email"),
						Label:     text.Chars(`Sender Email`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `trans_email/ident_custom1/name`,
						ID:        path.NewRoute("name"),
						Label:     text.Chars(`Sender Name`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("ident_custom2"),
				Label:     text.Chars(`Custom Email 2`),
				SortOrder: 5,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `trans_email/ident_custom2/email`,
						ID:        path.NewRoute("email"),
						Label:     text.Chars(`Sender Email`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `trans_email/ident_custom2/name`,
						ID:        path.NewRoute("name"),
						Label:     text.Chars(`Sender Name`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("ident_general"),
				Label:     text.Chars(`General Contact`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `trans_email/ident_general/email`,
						ID:        path.NewRoute("email"),
						Label:     text.Chars(`Sender Email`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `trans_email/ident_general/name`,
						ID:        path.NewRoute("name"),
						Label:     text.Chars(`Sender Name`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("ident_sales"),
				Label:     text.Chars(`Sales Representative`),
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `trans_email/ident_sales/email`,
						ID:        path.NewRoute("email"),
						Label:     text.Chars(`Sender Email`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `trans_email/ident_sales/name`,
						ID:        path.NewRoute("name"),
						Label:     text.Chars(`Sender Name`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("ident_support"),
				Label:     text.Chars(`Customer Support`),
				SortOrder: 3,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `trans_email/ident_support/email`,
						ID:        path.NewRoute("email"),
						Label:     text.Chars(`Sender Email`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `trans_email/ident_support/name`,
						ID:        path.NewRoute("name"),
						Label:     text.Chars(`Sender Name`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("design"),
		Label:     text.Chars("Design"),
		SortOrder: 30,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("theme"),
				Label:     text.Chars(`Design Theme`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/theme/theme_id`,
						ID:        path.NewRoute("theme_id"),
						Label:     text.Chars(`Design Theme`),
						Comment:   text.Chars(`If no value is specified, the system default will be used. The system default may be modified by third party extensions.`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/theme/ua_regexp`,
						ID:        path.NewRoute("ua_regexp"),
						Label:     text.Chars(`User-Agent Exceptions`),
						Comment:   text.Chars(`Search strings are either normal strings or regular exceptions (PCRE). They are matched in the same order as entered. Examples:<br /><span style="font-family:monospace">Firefox<br />/^mozilla/i</span>`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("pagination"),
				Label:     text.Chars(`Pagination`),
				SortOrder: 500,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/pagination/pagination_frame`,
						ID:        path.NewRoute("pagination_frame"),
						Label:     text.Chars(`Pagination Frame`),
						Comment:   text.Chars(`How many links to display at once.`),
						Type:      element.TypeText,
						SortOrder: 7,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/pagination/pagination_frame_skip`,
						ID:        path.NewRoute("pagination_frame_skip"),
						Label:     text.Chars(`Pagination Frame Skip`),
						Comment:   text.Chars(`If the current frame position does not cover utmost pages, will render link to current position plus/minus this value.`),
						Type:      element.TypeText,
						SortOrder: 8,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/pagination/anchor_text_for_previous`,
						ID:        path.NewRoute("anchor_text_for_previous"),
						Label:     text.Chars(`Anchor Text for Previous`),
						Comment:   text.Chars(`Alternative text for previous link in pagination menu. If empty, default arrow image will used.`),
						Type:      element.TypeText,
						SortOrder: 9,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/pagination/anchor_text_for_next`,
						ID:        path.NewRoute("anchor_text_for_next"),
						Label:     text.Chars(`Anchor Text for Next`),
						Comment:   text.Chars(`Alternative text for next link in pagination menu. If empty, default arrow image will used.`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("email"),
				Label:     text.Chars(`Transactional Emails`),
				SortOrder: 510,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/email/logo`,
						ID:        path.NewRoute("logo"),
						Label:     text.Chars(`Logo Image`),
						Comment:   text.Chars(`Allowed file types: jpg, jpeg, gif, png`),
						Type:      element.TypeImage,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/email/logo_alt`,
						ID:        path.NewRoute("logo_alt"),
						Label:     text.Chars(`Logo Image Alt`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("dev"),
		Label:     text.Chars("Developer"),
		SortOrder: 920,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("debug"),
				Label:     text.Chars(`Debug`),
				SortOrder: 20,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/debug/template_hints`,
						ID:        path.NewRoute("template_hints"),
						Label:     text.Chars(`Template Path Hints`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `dev/debug/template_hints_blocks`,
						ID:        path.NewRoute("template_hints_blocks"),
						Label:     text.Chars(`Add Block Names to Hints`),
						Type:      element.TypeSelect,
						SortOrder: 21,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("template"),
				Label:     text.Chars(`Template Settings`),
				SortOrder: 25,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/template/allow_symlink`,
						ID:        path.NewRoute("allow_symlink"),
						Label:     text.Chars(`Allow Symlinks`),
						Comment:   text.Chars(`Warning! Enabling this feature is not recommended on production environments because it represents a potential security risk.`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `dev/template/minify_html`,
						ID:        path.NewRoute("minify_html"),
						Label:     text.Chars(`Minify Html`),
						Type:      element.TypeSelect,
						SortOrder: 25,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("translate_inline"),
				Label:     text.Chars(`Translate Inline`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/translate_inline/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled for Frontend`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `dev/translate_inline/active_admin`,
						ID:        path.NewRoute("active_admin"),
						Label:     text.Chars(`Enabled for Admin`),
						Comment:   text.Chars(`Translate, blocks and other output caches should be disabled for both frontend and admin inline translations.`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("js"),
				Label:     text.Chars(`JavaScript Settings`),
				SortOrder: 100,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/js/merge_files`,
						ID:        path.NewRoute("merge_files"),
						Label:     text.Chars(`Merge JavaScript Files`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `dev/js/enable_js_bundling`,
						ID:        path.NewRoute("enable_js_bundling"),
						Label:     text.Chars(`Enable Javascript Bundling`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `dev/js/minify_files`,
						ID:        path.NewRoute("minify_files"),
						Label:     text.Chars(`Minify JavaScript Files`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("css"),
				Label:     text.Chars(`CSS Settings`),
				SortOrder: 110,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/css/merge_css_files`,
						ID:        path.NewRoute("merge_css_files"),
						Label:     text.Chars(`Merge CSS Files`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `dev/css/minify_files`,
						ID:        path.NewRoute("minify_files"),
						Label:     text.Chars(`Minify CSS Files`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("image"),
				Label:     text.Chars(`Image Processing Settings`),
				SortOrder: 120,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/image/default_adapter`,
						ID:        path.NewRoute("default_adapter"),
						Label:     text.Chars(`Image Adapter`),
						Comment:   text.Chars(`When the adapter was changed, please, flush Catalog Images Cache.`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("static"),
				Label:     text.Chars(`Static Files Settings`),
				SortOrder: 130,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/static/sign`,
						ID:        path.NewRoute("sign"),
						Label:     text.Chars(`Sign Static Files`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("general"),
		Label:     text.Chars("General"),
		SortOrder: 10,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("country"),
				Label:     text.Chars(`Country Options`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `general/country/allow`,
						ID:        path.NewRoute("allow"),
						Label:     text.Chars(`Allow Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/country/default`,
						ID:        path.NewRoute("default"),
						Label:     text.Chars(`Default Country`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/country/eu_countries`,
						ID:        path.NewRoute("eu_countries"),
						Label:     text.Chars(`European Union Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("locale"),
				Label:     text.Chars(`Locale Options`),
				SortOrder: 8,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `general/locale/timezone`,
						ID:        path.NewRoute("timezone"),
						Label:     text.Chars(`Timezone`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/locale/code`,
						ID:        path.NewRoute("code"),
						Label:     text.Chars(`Locale`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/locale/firstday`,
						ID:        path.NewRoute("firstday"),
						Label:     text.Chars(`First Day of Week`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/locale/weekend`,
						ID:        path.NewRoute("weekend"),
						Label:     text.Chars(`Weekend Days`),
						Type:      element.TypeMultiselect,
						SortOrder: 15,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("store_information"),
				Label:     text.Chars(`Store Information`),
				SortOrder: 100,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `general/store_information/name`,
						ID:        path.NewRoute("name"),
						Label:     text.Chars(`Store Name`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/store_information/phone`,
						ID:        path.NewRoute("phone"),
						Label:     text.Chars(`Store Phone Number`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/store_information/country_id`,
						ID:        path.NewRoute("country_id"),
						Label:     text.Chars(`Country`),
						Type:      element.TypeSelect,
						SortOrder: 25,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/store_information/region_id`,
						ID:        path.NewRoute("region_id"),
						Label:     text.Chars(`Region/State`),
						Type:      element.TypeText,
						SortOrder: 27,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/store_information/postcode`,
						ID:        path.NewRoute("postcode"),
						Label:     text.Chars(`ZIP/Postal Code`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/store_information/city`,
						ID:        path.NewRoute("city"),
						Label:     text.Chars(`City`),
						Type:      element.TypeText,
						SortOrder: 45,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/store_information/street_line1`,
						ID:        path.NewRoute("street_line1"),
						Label:     text.Chars(`Street Address`),
						Type:      element.TypeText,
						SortOrder: 55,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/store_information/street_line2`,
						ID:        path.NewRoute("street_line2"),
						Label:     text.Chars(`Street Address Line 2`),
						Type:      element.TypeText,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `general/store_information/merchant_vat_number`,
						ID:        path.NewRoute("merchant_vat_number"),
						Label:     text.Chars(`VAT Number`),
						Type:      element.TypeText,
						SortOrder: 61,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("single_store_mode"),
				Label:     text.Chars(`Single-Store Mode`),
				SortOrder: 150,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `general/single_store_mode/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enable Single-Store Mode`),
						Comment:   text.Chars(`This setting will not be taken into account if system has more than one store view.`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("system"),
		Label:     text.Chars("System"),
		SortOrder: 900,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("smtp"),
				Label:     text.Chars(`Mail Sending Settings`),
				SortOrder: 20,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/smtp/disable`,
						ID:        path.NewRoute("disable"),
						Label:     text.Chars(`Disable Email Communications`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/smtp/host`,
						ID:        path.NewRoute("host"),
						Label:     text.Chars(`Host`),
						Comment:   text.Chars(`For Windows server only.`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/smtp/port`,
						ID:        path.NewRoute("port"),
						Label:     text.Chars(`Port (25)`),
						Comment:   text.Chars(`For Windows server only.`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/smtp/set_return_path`,
						ID:        path.NewRoute("set_return_path"),
						Label:     text.Chars(`Set Return-Path`),
						Type:      element.TypeSelect,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/smtp/return_path_email`,
						ID:        path.NewRoute("return_path_email"),
						Label:     text.Chars(`Return-Path Email`),
						Type:      element.TypeText,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("admin"),
		Label:     text.Chars("Admin"),
		SortOrder: 20,
		Scope:     scope.PermDefault,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("emails"),
				Label:     text.Chars(`Admin User Emails`),
				SortOrder: 10,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `admin/emails/forgot_email_template`,
						ID:        path.NewRoute("forgot_email_template"),
						Label:     text.Chars(`Forgot Password Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `admin/emails/forgot_email_identity`,
						ID:        path.NewRoute("forgot_email_identity"),
						Label:     text.Chars(`Forgot and Reset Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `admin/emails/password_reset_link_expiration_period`,
						ID:        path.NewRoute("password_reset_link_expiration_period"),
						Label:     text.Chars(`Recovery Link Expiration Period (days)`),
						Comment:   text.Chars(`Please enter a number 1 or greater in this field.`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("startup"),
				Label:     text.Chars(`Startup Page`),
				SortOrder: 20,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `admin/startup/menu_item_id`,
						ID:        path.NewRoute("menu_item_id"),
						Label:     text.Chars(`Startup Page`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("url"),
				Label:     text.Chars(`Admin Base URL`),
				SortOrder: 30,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `admin/url/use_custom`,
						ID:        path.NewRoute("use_custom"),
						Label:     text.Chars(`Use Custom Admin URL`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `admin/url/custom`,
						ID:        path.NewRoute("custom"),
						Label:     text.Chars(`Custom Admin URL`),
						Comment:   text.Chars(`Make sure that base URL ends with '/' (slash), e.g. http://yourdomain/magento/`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `admin/url/use_custom_path`,
						ID:        path.NewRoute("use_custom_path"),
						Label:     text.Chars(`Use Custom Admin Path`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `admin/url/custom_path`,
						ID:        path.NewRoute("custom_path"),
						Label:     text.Chars(`Custom Admin Path`),
						Comment:   text.Chars(`You will have to log in after you save your custom admin path.`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("security"),
				Label:     text.Chars(`Security`),
				SortOrder: 35,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `admin/security/use_form_key`,
						ID:        path.NewRoute("use_form_key"),
						Label:     text.Chars(`Add Secret Key to URLs`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `admin/security/use_case_sensitive_login`,
						ID:        path.NewRoute("use_case_sensitive_login"),
						Label:     text.Chars(`Login is Case Sensitive`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `admin/security/session_lifetime`,
						ID:        path.NewRoute("session_lifetime"),
						Label:     text.Chars(`Admin Session Lifetime (seconds)`),
						Comment:   text.Chars(`Values less than 60 are ignored.`),
						Type:      element.TypeText,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("dashboard"),
				Label:     text.Chars(`Dashboard`),
				SortOrder: 40,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `admin/dashboard/enable_charts`,
						ID:        path.NewRoute("enable_charts"),
						Label:     text.Chars(`Enable Charts`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("web"),
		Label:     text.Chars("Web"),
		SortOrder: 20,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("url"),
				Label:     text.Chars(`Url Options`),
				SortOrder: 3,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/url/use_store`,
						ID:        path.NewRoute("use_store"),
						Label:     text.Chars(`Add Store Code to Urls`),
						Comment:   text.Chars(`<strong style="color:red">Warning!</strong> When using Store Code in URLs, in some cases system may not work properly if URLs without Store Codes are specified in the third party services (e.g. PayPal etc.).`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/url/redirect_to_base`,
						ID:        path.NewRoute("redirect_to_base"),
						Label:     text.Chars(`Auto-redirect to Base URL`),
						Comment:   text.Chars(`I.e. redirect from http://example.com/store/ to http://www.example.com/store/`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("seo"),
				Label:     text.Chars(`Search Engine Optimization`),
				SortOrder: 5,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/seo/use_rewrites`,
						ID:        path.NewRoute("use_rewrites"),
						Label:     text.Chars(`Use Web Server Rewrites`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("unsecure"),
				Label:     text.Chars(`Base URLs`),
				Comment:   text.Chars(`Any of the fields allow fully qualified URLs that end with '/' (slash) e.g. http://example.com/magento/`),
				SortOrder: 10,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/unsecure/base_url`,
						ID:        path.NewRoute("base_url"),
						Label:     text.Chars(`Base URL`),
						Comment:   text.Chars(`Specify URL or {{base_url}} placeholder.`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/unsecure/base_link_url`,
						ID:        path.NewRoute("base_link_url"),
						Label:     text.Chars(`Base Link URL`),
						Comment:   text.Chars(`May start with {{unsecure_base_url}} placeholder.`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/unsecure/base_static_url`,
						ID:        path.NewRoute("base_static_url"),
						Label:     text.Chars(`Base URL for Static View Files`),
						Comment:   text.Chars(`May be empty or start with {{unsecure_base_url}} placeholder.`),
						Type:      element.TypeText,
						SortOrder: 25,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/unsecure/base_media_url`,
						ID:        path.NewRoute("base_media_url"),
						Label:     text.Chars(`Base URL for User Media Files`),
						Comment:   text.Chars(`May be empty or start with {{unsecure_base_url}} placeholder.`),
						Type:      element.TypeText,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("secure"),
				Label:     text.Chars(`Base URLs (Secure)`),
				Comment:   text.Chars(`Any of the fields allow fully qualified URLs that end with '/' (slash) e.g. https://example.com/magento/`),
				SortOrder: 20,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/secure/base_url`,
						ID:        path.NewRoute("base_url"),
						Label:     text.Chars(`Secure Base URL`),
						Comment:   text.Chars(`Specify URL or {{base_url}}, or {{unsecure_base_url}} placeholder.`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/secure/base_link_url`,
						ID:        path.NewRoute("base_link_url"),
						Label:     text.Chars(`Secure Base Link URL`),
						Comment:   text.Chars(`May start with {{secure_base_url}} or {{unsecure_base_url}} placeholder.`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/secure/base_static_url`,
						ID:        path.NewRoute("base_static_url"),
						Label:     text.Chars(`Secure Base URL for Static View Files`),
						Comment:   text.Chars(`May be empty or start with {{secure_base_url}}, or {{unsecure_base_url}} placeholder.`),
						Type:      element.TypeText,
						SortOrder: 25,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/secure/base_media_url`,
						ID:        path.NewRoute("base_media_url"),
						Label:     text.Chars(`Secure Base URL for User Media Files`),
						Comment:   text.Chars(`May be empty or start with {{secure_base_url}}, or {{unsecure_base_url}} placeholder.`),
						Type:      element.TypeText,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/secure/use_in_frontend`,
						ID:        path.NewRoute("use_in_frontend"),
						Label:     text.Chars(`Use Secure URLs in Frontend`),
						Comment:   text.Chars(`Enter https protocol to use Secure URLs in Frontend.`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/secure/use_in_adminhtml`,
						ID:        path.NewRoute("use_in_adminhtml"),
						Label:     text.Chars(`Use Secure URLs in Admin`),
						Comment:   text.Chars(`Enter https protocol to use Secure URLs in Admin.`),
						Type:      element.TypeSelect,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/secure/offloader_header`,
						ID:        path.NewRoute("offloader_header"),
						Label:     text.Chars(`Offloader header`),
						Type:      element.TypeText,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("default"),
				Label:     text.Chars(`Default Pages`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/default/front`,
						ID:        path.NewRoute("front"),
						Label:     text.Chars(`Default Web URL`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/default/no_route`,
						ID:        path.NewRoute("no_route"),
						Label:     text.Chars(`Default No-route URL`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("session"),
				Label:     text.Chars(`Session Validation Settings`),
				SortOrder: 60,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/session/use_remote_addr`,
						ID:        path.NewRoute("use_remote_addr"),
						Label:     text.Chars(`Validate REMOTE_ADDR`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/session/use_http_via`,
						ID:        path.NewRoute("use_http_via"),
						Label:     text.Chars(`Validate HTTP_VIA`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/session/use_http_x_forwarded_for`,
						ID:        path.NewRoute("use_http_x_forwarded_for"),
						Label:     text.Chars(`Validate HTTP_X_FORWARDED_FOR`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/session/use_http_user_agent`,
						ID:        path.NewRoute("use_http_user_agent"),
						Label:     text.Chars(`Validate HTTP_USER_AGENT`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/session/use_frontend_sid`,
						ID:        path.NewRoute("use_frontend_sid"),
						Label:     text.Chars(`Use SID on Frontend`),
						Comment:   text.Chars(`Allows customers to stay logged in when switching between different stores.`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("media_storage_configuration"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/media_storage_configuration/allowed_resources`,
						ID:      path.NewRoute("allowed_resources"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"email_folder":"email"}`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("emails"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/emails/forgot_email_template`,
						ID:      path.NewRoute("forgot_email_template"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `system_emails_forgot_email_template`,
					},

					&element.Field{
						// Path: `system/emails/forgot_email_identity`,
						ID:      path.NewRoute("forgot_email_identity"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `general`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("dashboard"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/dashboard/enable_charts`,
						ID:      path.NewRoute("enable_charts"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("general"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("validator_data"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `general/validator_data/input_types`,
						ID:      path.NewRoute("input_types"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"price":"price","media_image":"media_image","gallery":"gallery"}`,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("system"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("backup"),
				Label:     text.Chars(`Scheduled Backup Settings`),
				SortOrder: 500,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/backup/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enable Scheduled Backup`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/backup/type`,
						ID:        path.NewRoute("type"),
						Label:     text.Chars(`Backup Type`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/backup/time`,
						ID:        path.NewRoute("time"),
						Label:     text.Chars(`Start Time`),
						Type:      element.TypeTime,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/backup/frequency`,
						ID:        path.NewRoute("frequency"),
						Label:     text.Chars(`Frequency`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/backup/maintenance`,
						ID:        path.NewRoute("maintenance"),
						Label:     text.Chars(`Maintenance Mode`),
						Comment:   text.Chars(`Please put your store into maintenance mode during backup.`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("admin"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("captcha"),
				Label:     text.Chars(`CAPTCHA`),
				SortOrder: 50,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `admin/captcha/enable`,
						ID:        path.NewRoute("enable"),
						Label:     text.Chars(`Enable CAPTCHA in Admin`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},

					&element.Field{
						// Path: `admin/captcha/font`,
						ID:        path.NewRoute("font"),
						Label:     text.Chars(`Font`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `linlibertine`,
					},

					&element.Field{
						// Path: `admin/captcha/forms`,
						ID:        path.NewRoute("forms"),
						Label:     text.Chars(`Forms`),
						Type:      element.TypeMultiselect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `backend_forgotpassword`,
					},

					&element.Field{
						// Path: `admin/captcha/mode`,
						ID:        path.NewRoute("mode"),
						Label:     text.Chars(`Displaying Mode`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `after_fail`,
					},

					&element.Field{
						// Path: `admin/captcha/failed_attempts_login`,
						ID:        path.NewRoute("failed_attempts_login"),
						Label:     text.Chars(`Number of Unsuccessful Attempts to Login`),
						Comment:   text.Chars(`If 0 is specified, CAPTCHA on the Login form will be always available.`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   3,
					},

					&element.Field{
						// Path: `admin/captcha/timeout`,
						ID:        path.NewRoute("timeout"),
						Label:     text.Chars(`CAPTCHA Timeout (minutes)`),
						Type:      element.TypeText,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   7,
					},

					&element.Field{
						// Path: `admin/captcha/length`,
						ID:        path.NewRoute("length"),
						Label:     text.Chars(`Number of Symbols`),
						Comment:   text.Chars(`Please specify 8 symbols at the most. Range allowed (e.g. 3-5)`),
						Type:      element.TypeText,
						SortOrder: 7,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `4-5`,
					},

					&element.Field{
						// Path: `admin/captcha/symbols`,
						ID:        path.NewRoute("symbols"),
						Label:     text.Chars(`Symbols Used in CAPTCHA`),
						Comment:   text.Chars(`Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.<br />Similar looking characters (e.g. "i", "l", "1") decrease chance of correct recognition by customer.`),
						Type:      element.TypeText,
						SortOrder: 8,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `ABCDEFGHJKMnpqrstuvwxyz23456789`,
					},

					&element.Field{
						// Path: `admin/captcha/case_sensitive`,
						ID:        path.NewRoute("case_sensitive"),
						Label:     text.Chars(`Case Sensitive`),
						Type:      element.TypeSelect,
						SortOrder: 9,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("customer"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("captcha"),
				Label:     text.Chars(`CAPTCHA`),
				SortOrder: 110,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/captcha/enable`,
						ID:        path.NewRoute("enable"),
						Label:     text.Chars(`Enable CAPTCHA on Frontend`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `customer/captcha/font`,
						ID:        path.NewRoute("font"),
						Label:     text.Chars(`Font`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `linlibertine`,
					},

					&element.Field{
						// Path: `customer/captcha/forms`,
						ID:        path.NewRoute("forms"),
						Label:     text.Chars(`Forms`),
						Comment:   text.Chars(`CAPTCHA for "Create user" and "Forgot password" forms is always enabled if chosen.`),
						Type:      element.TypeMultiselect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `user_forgotpassword`,
					},

					&element.Field{
						// Path: `customer/captcha/mode`,
						ID:        path.NewRoute("mode"),
						Label:     text.Chars(`Displaying Mode`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `after_fail`,
					},

					&element.Field{
						// Path: `customer/captcha/failed_attempts_login`,
						ID:        path.NewRoute("failed_attempts_login"),
						Label:     text.Chars(`Number of Unsuccessful Attempts to Login`),
						Comment:   text.Chars(`If 0 is specified, CAPTCHA on the Login form will be always available.`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   3,
					},

					&element.Field{
						// Path: `customer/captcha/timeout`,
						ID:        path.NewRoute("timeout"),
						Label:     text.Chars(`CAPTCHA Timeout (minutes)`),
						Type:      element.TypeText,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   7,
					},

					&element.Field{
						// Path: `customer/captcha/length`,
						ID:        path.NewRoute("length"),
						Label:     text.Chars(`Number of Symbols`),
						Comment:   text.Chars(`Please specify 8 symbols at the most. Range allowed (e.g. 3-5)`),
						Type:      element.TypeText,
						SortOrder: 7,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `4-5`,
					},

					&element.Field{
						// Path: `customer/captcha/symbols`,
						ID:        path.NewRoute("symbols"),
						Label:     text.Chars(`Symbols Used in CAPTCHA`),
						Comment:   text.Chars(`Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.<br />Similar looking characters (e.g. "i", "l", "1") decrease chance of correct recognition by customer.`),
						Type:      element.TypeText,
						SortOrder: 8,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `ABCDEFGHJKMnpqrstuvwxyz23456789`,
					},

					&element.Field{
						// Path: `customer/captcha/case_sensitive`,
						ID:        path.NewRoute("case_sensitive"),
						Label:     text.Chars(`Case Sensitive`),
						Type:      element.TypeSelect,
						SortOrder: 9,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("media_storage_configuration"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/media_storage_configuration/allowed_resources`,
						ID:      path.NewRoute("allowed_resources"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"captcha_folder":"captcha"}`,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("admin"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("captcha"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `admin/captcha/type`,
						ID:      path.NewRoute("type"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `default`,
					},

					&element.Field{
						// Path: `admin/captcha/failed_attempts_ip`,
						ID:      path.NewRoute("failed_attempts_ip"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: 1000,
					},

					&element.Field{
						// Path: `admin/captcha/shown_to_logged_in_user`,
						ID:      path.NewRoute("shown_to_logged_in_user"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `admin/captcha/always_for`,
						ID:      path.NewRoute("always_for"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"backend_forgotpassword":"1"}`,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("customer"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("captcha"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/captcha/type`,
						ID:      path.NewRoute("type"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `default`,
					},

					&element.Field{
						// Path: `customer/captcha/failed_attempts_ip`,
						ID:      path.NewRoute("failed_attempts_ip"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: 1000,
					},

					&element.Field{
						// Path: `customer/captcha/shown_to_logged_in_user`,
						ID:      path.NewRoute("shown_to_logged_in_user"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"contact_us":"1"}`,
					},

					&element.Field{
						// Path: `customer/captcha/always_for`,
						ID:      path.NewRoute("always_for"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"user_create":"1","user_forgotpassword":"1","guest_checkout":"1","register_during_checkout":"1","contact_us":"1"}`,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("captcha"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("_value"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `captcha/_value/fonts`,
						ID:      path.NewRoute("fonts"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"linlibertine":{"label":"LinLibertine","path":"LinLibertineFont\/LinLibertine_Bd-2.8.1.ttf"}}`,
					},

					&element.Field{
						// Path: `captcha/_value/frontend`,
						ID:      path.NewRoute("frontend"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"areas":{"user_create":{"label":"Create user"},"user_login":{"label":"Login"},"user_forgotpassword":{"label":"Forgot password"},"guest_checkout":{"label":"Checkout as Guest"},"register_during_checkout":{"label":"Register during Checkout"},"contact_us":{"label":"Contact Us"}}}`,
					},

					&element.Field{
						// Path: `captcha/_value/backend`,
						ID:      path.NewRoute("backend"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"areas":{"backend_login":{"label":"Admin Login"},"backend_forgotpassword":{"label":"Admin Forgot Password"}}}`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("_attribute"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `captcha/_attribute/translate`,
						ID:      path.NewRoute("translate"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `label`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("catalog"),
		Label:     text.Chars("Catalog"),
		SortOrder: 40,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("fields_masks"),
				Label:     text.Chars(`Product Fields Auto-Generation`),
				SortOrder: 90,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/fields_masks/sku`,
						ID:        path.NewRoute("sku"),
						Label:     text.Chars(`Mask for SKU`),
						Comment:   text.Chars(`Use {{name}} as Product Name placeholder`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `{{name}}`,
					},

					&element.Field{
						// Path: `catalog/fields_masks/meta_title`,
						ID:        path.NewRoute("meta_title"),
						Label:     text.Chars(`Mask for Meta Title`),
						Comment:   text.Chars(`Use {{name}} as Product Name placeholder`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `{{name}}`,
					},

					&element.Field{
						// Path: `catalog/fields_masks/meta_keyword`,
						ID:        path.NewRoute("meta_keyword"),
						Label:     text.Chars(`Mask for Meta Keywords`),
						Comment:   text.Chars(`Use {{name}} as Product Name or {{sku}} as Product SKU placeholders`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `{{name}}`,
					},

					&element.Field{
						// Path: `catalog/fields_masks/meta_description`,
						ID:        path.NewRoute("meta_description"),
						Label:     text.Chars(`Mask for Meta Description`),
						Comment:   text.Chars(`Use {{name}} and {{description}} as Product Name and Product Description placeholders`),
						Type:      element.TypeText,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `{{name}} {{description}}`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("frontend"),
				Label:     text.Chars(`Frontend`),
				SortOrder: 100,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/frontend/list_mode`,
						ID:        path.NewRoute("list_mode"),
						Label:     text.Chars(`List Mode`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `grid-list`,
					},

					&element.Field{
						// Path: `catalog/frontend/grid_per_page_values`,
						ID:        path.NewRoute("grid_per_page_values"),
						Label:     text.Chars(`Products per Page on Grid Allowed Values`),
						Comment:   text.Chars(`Comma-separated.`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `9,15,30`,
					},

					&element.Field{
						// Path: `catalog/frontend/grid_per_page`,
						ID:        path.NewRoute("grid_per_page"),
						Label:     text.Chars(`Products per Page on Grid Default Value`),
						Comment:   text.Chars(`Must be in the allowed values list`),
						Type:      element.TypeText,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   9,
					},

					&element.Field{
						// Path: `catalog/frontend/list_per_page_values`,
						ID:        path.NewRoute("list_per_page_values"),
						Label:     text.Chars(`Products per Page on List Allowed Values`),
						Comment:   text.Chars(`Comma-separated.`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `5,10,15,20,25`,
					},

					&element.Field{
						// Path: `catalog/frontend/list_per_page`,
						ID:        path.NewRoute("list_per_page"),
						Label:     text.Chars(`Products per Page on List Default Value`),
						Comment:   text.Chars(`Must be in the allowed values list`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   10,
					},

					&element.Field{
						// Path: `catalog/frontend/flat_catalog_category`,
						ID:        path.NewRoute("flat_catalog_category"),
						Label:     text.Chars(`Use Flat Catalog Category`),
						Type:      element.TypeSelect,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},

					&element.Field{
						// Path: `catalog/frontend/flat_catalog_product`,
						ID:        path.NewRoute("flat_catalog_product"),
						Label:     text.Chars(`Use Flat Catalog Product`),
						Type:      element.TypeSelect,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/frontend/default_sort_by`,
						ID:        path.NewRoute("default_sort_by"),
						Label:     text.Chars(`Product Listing Sort by`),
						Type:      element.TypeSelect,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `position`,
					},

					&element.Field{
						// Path: `catalog/frontend/list_allow_all`,
						ID:        path.NewRoute("list_allow_all"),
						Label:     text.Chars(`Allow All Products per Page`),
						Comment:   text.Chars(`Whether to show "All" option in the "Show X Per Page" dropdown`),
						Type:      element.TypeSelect,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/frontend/parse_url_directives`,
						ID:        path.NewRoute("parse_url_directives"),
						Label:     text.Chars(`Allow Dynamic Media URLs in Products and Categories`),
						Comment:   text.Chars(`E.g. {{media url="path/to/image.jpg"}} {{skin url="path/to/picture.gif"}}. Dynamic directives parsing impacts catalog performance.`),
						Type:      element.TypeSelect,
						SortOrder: 200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("placeholder"),
				Label:     text.Chars(`Product Image Placeholders`),
				SortOrder: 300,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/placeholder/placeholder`,
						ID:        path.NewRoute("placeholder"),
						Label:     nil,
						Type:      element.TypeImage,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("seo"),
				Label:     text.Chars(`Search Engine Optimization`),
				SortOrder: 500,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/seo/title_separator`,
						ID:        path.NewRoute("title_separator"),
						Label:     text.Chars(`Page Title Separator`),
						Type:      element.TypeText,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `-`,
					},

					&element.Field{
						// Path: `catalog/seo/category_canonical_tag`,
						ID:        path.NewRoute("category_canonical_tag"),
						Label:     text.Chars(`Use Canonical Link Meta Tag For Categories`),
						Type:      element.TypeSelect,
						SortOrder: 7,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `catalog/seo/product_canonical_tag`,
						ID:        path.NewRoute("product_canonical_tag"),
						Label:     text.Chars(`Use Canonical Link Meta Tag For Products`),
						Type:      element.TypeSelect,
						SortOrder: 8,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("price"),
				Label:     text.Chars(`Price`),
				SortOrder: 400,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/price/scope`,
						ID:        path.NewRoute("scope"),
						Label:     text.Chars(`Catalog Price Scope`),
						Comment:   text.Chars(`This defines the base currency scope ("Currency Setup" > "Currency Options" > "Base Currency").`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("navigation"),
				Label:     text.Chars(`Category Top Navigation`),
				SortOrder: 500,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/navigation/max_depth`,
						ID:        path.NewRoute("max_depth"),
						Label:     text.Chars(`Maximal Depth`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   0,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("custom_options"),
				Label:     text.Chars(`Date & Time Custom Options`),
				SortOrder: 700,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/custom_options/use_calendar`,
						ID:        path.NewRoute("use_calendar"),
						Label:     text.Chars(`Use JavaScript Calendar`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/custom_options/date_fields_order`,
						ID:        path.NewRoute("date_fields_order"),
						Label:     text.Chars(`Date Fields Order`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `m,d,y`,
					},

					&element.Field{
						// Path: `catalog/custom_options/time_format`,
						ID:        path.NewRoute("time_format"),
						Label:     text.Chars(`Time Format`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `12h`,
					},

					&element.Field{
						// Path: `catalog/custom_options/year_range`,
						ID:        path.NewRoute("year_range"),
						Label:     text.Chars(`Year Range`),
						Comment:   text.Chars(`Please use a four-digit year format.`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("design"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("watermark"),
				Label:     text.Chars(`Product Image Watermarks`),
				SortOrder: 400,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/watermark/size`,
						ID:        path.NewRoute("size"),
						Label:     text.Chars(`Watermark Default Size`),
						Comment:   text.Chars(`Example format: 200x300.`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/watermark/imageOpacity`,
						ID:        path.NewRoute("imageOpacity"),
						Label:     text.Chars(`Watermark Opacity, Percent`),
						Type:      element.TypeText,
						SortOrder: 150,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/watermark/image`,
						ID:        path.NewRoute("image"),
						Label:     text.Chars(`Watermark`),
						Comment:   text.Chars(`Allowed file types: jpeg, gif, png.`),
						Type:      element.TypeImage,
						SortOrder: 200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/watermark/position`,
						ID:        path.NewRoute("position"),
						Label:     text.Chars(`Watermark Position`),
						Type:      element.TypeSelect,
						SortOrder: 300,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("cms"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("wysiwyg"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `cms/wysiwyg/use_static_urls_in_catalog`,
						ID:        path.NewRoute("use_static_urls_in_catalog"),
						Label:     text.Chars(`Use Static URLs for Media Content in WYSIWYG for Catalog`),
						Comment:   text.Chars(`This applies only to catalog products and categories. Media content will be inserted into the editor as a static URL. Media content is not updated if the system configuration base URL changes.`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("rss"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("catalog"),
				Label:     text.Chars(`Catalog`),
				SortOrder: 3,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `rss/catalog/new`,
						ID:        path.NewRoute("new"),
						Label:     text.Chars(`New Products`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `rss/catalog/special`,
						ID:        path.NewRoute("special"),
						Label:     text.Chars(`Special Products`),
						Type:      element.TypeSelect,
						SortOrder: 11,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `rss/catalog/category`,
						ID:        path.NewRoute("category"),
						Label:     text.Chars(`Top Level Category`),
						Type:      element.TypeSelect,
						SortOrder: 14,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("catalog"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("product"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/product/flat`,
						ID:      path.NewRoute("flat"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"max_index_count":"64"}`,
					},

					&element.Field{
						// Path: `catalog/product/default_tax_group`,
						ID:      path.NewRoute("default_tax_group"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: 2,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("seo"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/seo/product_url_suffix`,
						ID:      path.NewRoute("product_url_suffix"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `.html`,
					},

					&element.Field{
						// Path: `catalog/seo/category_url_suffix`,
						ID:      path.NewRoute("category_url_suffix"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `.html`,
					},

					&element.Field{
						// Path: `catalog/seo/product_use_categories`,
						ID:      path.NewRoute("product_use_categories"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `catalog/seo/save_rewrites_history`,
						ID:      path.NewRoute("save_rewrites_history"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("custom_options"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/custom_options/forbidden_extensions`,
						ID:      path.NewRoute("forbidden_extensions"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `php,exe`,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("media_storage_configuration"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/media_storage_configuration/allowed_resources`,
						ID:      path.NewRoute("allowed_resources"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"catalog_images_folder":"catalog","product_custom_options_fodler":"custom_options"}`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("cataloginventory"),
		Label:     text.Chars("Inventory"),
		SortOrder: 50,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("options"),
				Label:     text.Chars(`Stock Options`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `cataloginventory/options/can_subtract`,
						ID:        path.NewRoute("can_subtract"),
						Label:     text.Chars(`Decrease Stock When Order is Placed`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   true,
					},

					&element.Field{
						// Path: `cataloginventory/options/can_back_in_stock`,
						ID:        path.NewRoute("can_back_in_stock"),
						Label:     text.Chars(`Set Items' Status to be In Stock When Order is Cancelled`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   true,
					},

					&element.Field{
						// Path: `cataloginventory/options/show_out_of_stock`,
						ID:        path.NewRoute("show_out_of_stock"),
						Label:     text.Chars(`Display Out of Stock Products`),
						Comment:   text.Chars(`Products will still be shown by direct product URLs.`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},

					&element.Field{
						// Path: `cataloginventory/options/stock_threshold_qty`,
						ID:        path.NewRoute("stock_threshold_qty"),
						Label:     text.Chars(`Only X left Threshold`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   0,
					},

					&element.Field{
						// Path: `cataloginventory/options/display_product_stock_status`,
						ID:        path.NewRoute("display_product_stock_status"),
						Label:     text.Chars(`Display products availability in stock in the frontend`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("item_options"),
				Label:     text.Chars(`Product Stock Options`),
				Comment:   text.Chars(`Please note that these settings apply to individual items in the cart, not to the entire cart.`),
				SortOrder: 10,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `cataloginventory/item_options/manage_stock`,
						ID:        path.NewRoute("manage_stock"),
						Label:     text.Chars(`Manage Stock`),
						Comment:   text.Chars(`Changing can take some time due to processing whole catalog.`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   true,
					},

					&element.Field{
						// Path: `cataloginventory/item_options/backorders`,
						ID:        path.NewRoute("backorders"),
						Label:     text.Chars(`Backorders`),
						Comment:   text.Chars(`Changing can take some time due to processing whole catalog.`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},

					&element.Field{
						// Path: `cataloginventory/item_options/max_sale_qty`,
						ID:        path.NewRoute("max_sale_qty"),
						Label:     text.Chars(`Maximum Qty Allowed in Shopping Cart`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   10000,
					},

					&element.Field{
						// Path: `cataloginventory/item_options/min_qty`,
						ID:        path.NewRoute("min_qty"),
						Label:     text.Chars(`Qty for Item's Status to Become Out of Stock`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   0,
					},

					&element.Field{
						// Path: `cataloginventory/item_options/min_sale_qty`,
						ID:        path.NewRoute("min_sale_qty"),
						Label:     text.Chars(`Minimum Qty Allowed in Shopping Cart`),
						Type:      element.TypeText,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   1,
					},

					&element.Field{
						// Path: `cataloginventory/item_options/notify_stock_qty`,
						ID:        path.NewRoute("notify_stock_qty"),
						Label:     text.Chars(`Notify for Quantity Below`),
						Type:      element.TypeText,
						SortOrder: 7,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   1,
					},

					&element.Field{
						// Path: `cataloginventory/item_options/auto_return`,
						ID:        path.NewRoute("auto_return"),
						Label:     text.Chars(`Automatically Return Credit Memo Item to Stock`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `cataloginventory/item_options/enable_qty_increments`,
						ID:        path.NewRoute("enable_qty_increments"),
						Label:     text.Chars(`Enable Qty Increments`),
						Type:      element.TypeSelect,
						SortOrder: 8,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},

					&element.Field{
						// Path: `cataloginventory/item_options/qty_increments`,
						ID:        path.NewRoute("qty_increments"),
						Label:     text.Chars(`Qty Increments`),
						Type:      element.TypeText,
						SortOrder: 9,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   1,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("catalog"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("seo"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/seo/search_terms`,
						ID:        path.NewRoute("search_terms"),
						Label:     text.Chars(`Popular Search Terms`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("search"),
				Label:     text.Chars(`Catalog Search`),
				SortOrder: 500,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/search/engine`,
						ID:        path.NewRoute("engine"),
						Label:     nil,
						Type:      element.TypeText,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `mysql`,
					},

					&element.Field{
						// Path: `catalog/search/min_query_length`,
						ID:        path.NewRoute("min_query_length"),
						Label:     text.Chars(`Minimal Query Length`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   1,
					},

					&element.Field{
						// Path: `catalog/search/max_query_length`,
						ID:        path.NewRoute("max_query_length"),
						Label:     text.Chars(`Maximum Query Length`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   128,
					},

					&element.Field{
						// Path: `catalog/search/use_layered_navigation_count`,
						ID:        path.NewRoute("use_layered_navigation_count"),
						Label:     text.Chars(`Apply Layered Navigation if Search Results are Less Than`),
						Comment:   text.Chars(`Enter "0" to enable layered navigation for any number of results.`),
						Type:      element.TypeText,
						SortOrder: 25,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   0,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("catalog"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("seo"),
				Label:     text.Chars(`Search Engine Optimization`),
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/seo/category_url_suffix`,
						ID:        path.NewRoute("category_url_suffix"),
						Label:     text.Chars(`Category URL Suffix`),
						Comment:   text.Chars(`You need to refresh the cache.`),
						Type:      element.TypeText,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/seo/product_url_suffix`,
						ID:        path.NewRoute("product_url_suffix"),
						Label:     text.Chars(`Product URL Suffix`),
						Comment:   text.Chars(`You need to refresh the cache.`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/seo/product_use_categories`,
						ID:        path.NewRoute("product_use_categories"),
						Label:     text.Chars(`Use Categories Path for Product URLs`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/seo/save_rewrites_history`,
						ID:        path.NewRoute("save_rewrites_history"),
						Label:     text.Chars(`Create Permanent Redirect for URLs if URL Key Changed`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("payment_services"),
		Label:     text.Chars("Payment Services"),
		SortOrder: 450,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("centinel"),
				Label:     text.Chars(`3D Secure Credit Card Validation`),
				SortOrder: 1,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment_services/centinel/processor_id`,
						ID:        path.NewRoute("processor_id"),
						Label:     text.Chars(`Processor ID`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment_services/centinel/merchant_id`,
						ID:        path.NewRoute("merchant_id"),
						Label:     text.Chars(`Merchant ID`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment_services/centinel/password`,
						ID:        path.NewRoute("password"),
						Label:     text.Chars(`Password`),
						Type:      element.TypeObscure,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment_services/centinel/test_mode`,
						ID:        path.NewRoute("test_mode"),
						Label:     text.Chars(`Test Mode`),
						Comment:   text.Chars(`This overrides any API URL that may be specified by a payment method.`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment_services/centinel/debug`,
						ID:        path.NewRoute("debug"),
						Label:     text.Chars(`Debug Mode`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("checkout"),
		Label:     text.Chars("Checkout"),
		SortOrder: 305,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("options"),
				Label:     text.Chars(`Checkout Options`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `checkout/options/onepage_checkout_enabled`,
						ID:        path.NewRoute("onepage_checkout_enabled"),
						Label:     text.Chars(`Enable Onepage Checkout`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `checkout/options/guest_checkout`,
						ID:        path.NewRoute("guest_checkout"),
						Label:     text.Chars(`Allow Guest Checkout`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `checkout/options/customer_must_be_logged`,
						ID:        path.NewRoute("customer_must_be_logged"),
						Label:     text.Chars(`Require Customer To Be Logged In To Checkout`),
						Type:      element.TypeSelect,
						SortOrder: 15,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("cart"),
				Label:     text.Chars(`Shopping Cart`),
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `checkout/cart/delete_quote_after`,
						ID:        path.NewRoute("delete_quote_after"),
						Label:     text.Chars(`Quote Lifetime (days)`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   30,
					},

					&element.Field{
						// Path: `checkout/cart/redirect_to_cart`,
						ID:        path.NewRoute("redirect_to_cart"),
						Label:     text.Chars(`After Adding a Product Redirect to Shopping Cart`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("cart_link"),
				Label:     text.Chars(`My Cart Link`),
				SortOrder: 3,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `checkout/cart_link/use_qty`,
						ID:        path.NewRoute("use_qty"),
						Label:     text.Chars(`Display Cart Summary`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("sidebar"),
				Label:     text.Chars(`Shopping Cart Sidebar`),
				SortOrder: 4,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `checkout/sidebar/display`,
						ID:        path.NewRoute("display"),
						Label:     text.Chars(`Display Shopping Cart Sidebar`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `checkout/sidebar/count`,
						ID:        path.NewRoute("count"),
						Label:     text.Chars(`Maximum Display Recently Added Item(s)`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   5,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("payment_failed"),
				Label:     text.Chars(`Payment Failed Emails`),
				SortOrder: 100,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `checkout/payment_failed/identity`,
						ID:        path.NewRoute("identity"),
						Label:     text.Chars(`Payment Failed Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `general`,
					},

					&element.Field{
						// Path: `checkout/payment_failed/receiver`,
						ID:        path.NewRoute("receiver"),
						Label:     text.Chars(`Payment Failed Email Receiver`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `general`,
					},

					&element.Field{
						// Path: `checkout/payment_failed/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`Payment Failed Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `checkout_payment_failed_template`,
					},

					&element.Field{
						// Path: `checkout/payment_failed/copy_to`,
						ID:        path.NewRoute("copy_to"),
						Label:     text.Chars(`Send Payment Failed Email Copy To`),
						Comment:   text.Chars(`Separate by ",".`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `checkout/payment_failed/copy_method`,
						ID:        path.NewRoute("copy_method"),
						Label:     text.Chars(`Send Payment Failed Email Copy Method`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("checkout"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("options"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `checkout/options/enable_agreements`,
						ID:        path.NewRoute("enable_agreements"),
						Label:     text.Chars(`Enable Terms and Conditions`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("web"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("default"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/default/cms_home_page`,
						ID:        path.NewRoute("cms_home_page"),
						Label:     text.Chars(`CMS Home Page`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `home`,
					},

					&element.Field{
						// Path: `web/default/cms_no_route`,
						ID:        path.NewRoute("cms_no_route"),
						Label:     text.Chars(`CMS No Route Page`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `no-route`,
					},

					&element.Field{
						// Path: `web/default/cms_no_cookies`,
						ID:        path.NewRoute("cms_no_cookies"),
						Label:     text.Chars(`CMS No Cookies Page`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `enable-cookies`,
					},

					&element.Field{
						// Path: `web/default/show_cms_breadcrumbs`,
						ID:        path.NewRoute("show_cms_breadcrumbs"),
						Label:     text.Chars(`Show Breadcrumbs for CMS Pages`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("browser_capabilities"),
				Label:     text.Chars(`Browser Capabilities Detection`),
				SortOrder: 200,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/browser_capabilities/cookies`,
						ID:        path.NewRoute("cookies"),
						Label:     text.Chars(`Redirect to CMS-page if Cookies are Disabled`),
						Type:      element.TypeSelect,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/browser_capabilities/javascript`,
						ID:        path.NewRoute("javascript"),
						Label:     text.Chars(`Show Notice if JavaScript is Disabled`),
						Type:      element.TypeSelect,
						SortOrder: 200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/browser_capabilities/local_storage`,
						ID:        path.NewRoute("local_storage"),
						Label:     text.Chars(`Show Notice if Local Storage is Disabled`),
						Type:      element.TypeSelect,
						SortOrder: 300,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("cms"),
		Label:     text.Chars("Content Management"),
		SortOrder: 1001,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("wysiwyg"),
				Label:     text.Chars(`WYSIWYG Options`),
				SortOrder: 100,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `cms/wysiwyg/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enable WYSIWYG Editor`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `enabled`,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("web"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("default"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/default/front`,
						ID:      path.NewRoute("front"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `cms`,
					},

					&element.Field{
						// Path: `web/default/no_route`,
						ID:      path.NewRoute("no_route"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `cms/noroute/index`,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("media_storage_configuration"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/media_storage_configuration/allowed_resources`,
						ID:      path.NewRoute("allowed_resources"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"wysiwyg_image_folder":"wysiwyg"}`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("checkout"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("cart"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `checkout/cart/configurable_product_image`,
						ID:        path.NewRoute("configurable_product_image"),
						Label:     text.Chars(`Configurable Product Image`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `parent`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("contact"),
		Label:     text.Chars("Contacts"),
		SortOrder: 100,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("contact"),
				Label:     text.Chars(`Contact Us`),
				SortOrder: 10,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `contact/contact/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enable Contact Us`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("email"),
				Label:     text.Chars(`Email Options`),
				SortOrder: 50,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `contact/email/recipient_email`,
						ID:        path.NewRoute("recipient_email"),
						Label:     text.Chars(`Send Emails To`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `hello@example.com`,
					},

					&element.Field{
						// Path: `contact/email/sender_email_identity`,
						ID:        path.NewRoute("sender_email_identity"),
						Label:     text.Chars(`Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `custom2`,
					},

					&element.Field{
						// Path: `contact/email/email_template`,
						ID:        path.NewRoute("email_template"),
						Label:     text.Chars(`Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `contact_email_email_template`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("web"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("cookie"),
				Label:     text.Chars(`Default Cookie Settings`),
				SortOrder: 50,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/cookie/cookie_lifetime`,
						ID:        path.NewRoute("cookie_lifetime"),
						Label:     text.Chars(`Cookie Lifetime`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   3600,
					},

					&element.Field{
						// Path: `web/cookie/cookie_path`,
						ID:        path.NewRoute("cookie_path"),
						Label:     text.Chars(`Cookie Path`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/cookie/cookie_domain`,
						ID:        path.NewRoute("cookie_domain"),
						Label:     text.Chars(`Cookie Domain`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `web/cookie/cookie_httponly`,
						ID:        path.NewRoute("cookie_httponly"),
						Label:     text.Chars(`Use HTTP Only`),
						Comment:   text.Chars(`<strong style="color:red">Warning</strong>:  Do not set to "No". User security could be compromised.`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `web/cookie/cookie_restriction`,
						ID:        path.NewRoute("cookie_restriction"),
						Label:     text.Chars(`Cookie Restriction Mode`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("web"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("cookie"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `web/cookie/cookie_restriction_lifetime`,
						ID:      path.NewRoute("cookie_restriction_lifetime"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: 31536000,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("system"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("cron"),
				Label:     text.Chars(`Cron (Scheduled Tasks) - all the times are in minutes`),
				Comment:   text.Chars(`For correct URLs generated during cron runs please make sure that Web > Secure and Unsecure Base URLs are explicitly set.`),
				SortOrder: 15,
				Scope:     scope.PermDefault,
				Fields:    element.FieldSlice{},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("customer"),
		Label:     text.Chars("Customer Configuration"),
		SortOrder: 130,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("account_share"),
				Label:     text.Chars(`Account Sharing Options`),
				SortOrder: 10,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/account_share/scope`,
						ID:        path.NewRoute("scope"),
						Label:     text.Chars(`Share Customer Accounts`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("create_account"),
				Label:     text.Chars(`Create New Account Options`),
				SortOrder: 20,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/create_account/auto_group_assign`,
						ID:        path.NewRoute("auto_group_assign"),
						Label:     text.Chars(`Enable Automatic Assignment to Customer Group`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/create_account/tax_calculation_address_type`,
						ID:        path.NewRoute("tax_calculation_address_type"),
						Label:     text.Chars(`Tax Calculation Based On`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `billing`,
					},

					&element.Field{
						// Path: `customer/create_account/default_group`,
						ID:        path.NewRoute("default_group"),
						Label:     text.Chars(`Default Group`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `customer/create_account/viv_domestic_group`,
						ID:        path.NewRoute("viv_domestic_group"),
						Label:     text.Chars(`Group for Valid VAT ID - Domestic`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/create_account/viv_intra_union_group`,
						ID:        path.NewRoute("viv_intra_union_group"),
						Label:     text.Chars(`Group for Valid VAT ID - Intra-Union`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/create_account/viv_invalid_group`,
						ID:        path.NewRoute("viv_invalid_group"),
						Label:     text.Chars(`Group for Invalid VAT ID`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/create_account/viv_error_group`,
						ID:        path.NewRoute("viv_error_group"),
						Label:     text.Chars(`Validation Error Group`),
						Type:      element.TypeSelect,
						SortOrder: 55,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/create_account/viv_on_each_transaction`,
						ID:        path.NewRoute("viv_on_each_transaction"),
						Label:     text.Chars(`Validate on Each Transaction`),
						Type:      element.TypeSelect,
						SortOrder: 56,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/create_account/viv_disable_auto_group_assign_default`,
						ID:        path.NewRoute("viv_disable_auto_group_assign_default"),
						Label:     text.Chars(`Default Value for Disable Automatic Group Changes Based on VAT ID`),
						Type:      element.TypeSelect,
						SortOrder: 57,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/create_account/vat_frontend_visibility`,
						ID:        path.NewRoute("vat_frontend_visibility"),
						Label:     text.Chars(`Show VAT Number on Frontend`),
						Comment:   text.Chars(`To show VAT number on frontend, set Show VAT Number on Frontend option to Yes.`),
						Type:      element.TypeSelect,
						SortOrder: 58,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `customer/create_account/email_domain`,
						ID:        path.NewRoute("email_domain"),
						Label:     text.Chars(`Default Email Domain`),
						Type:      element.TypeText,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `example.com`,
					},

					&element.Field{
						// Path: `customer/create_account/email_template`,
						ID:        path.NewRoute("email_template"),
						Label:     text.Chars(`Default Welcome Email`),
						Type:      element.TypeSelect,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `customer_create_account_email_template`,
					},

					&element.Field{
						// Path: `customer/create_account/email_identity`,
						ID:        path.NewRoute("email_identity"),
						Label:     text.Chars(`Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `general`,
					},

					&element.Field{
						// Path: `customer/create_account/confirm`,
						ID:        path.NewRoute("confirm"),
						Label:     text.Chars(`Require Emails Confirmation`),
						Type:      element.TypeSelect,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `customer/create_account/email_confirmation_template`,
						ID:        path.NewRoute("email_confirmation_template"),
						Label:     text.Chars(`Confirmation Link Email`),
						Type:      element.TypeSelect,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `customer_create_account_email_confirmation_template`,
					},

					&element.Field{
						// Path: `customer/create_account/email_confirmed_template`,
						ID:        path.NewRoute("email_confirmed_template"),
						Label:     text.Chars(`Welcome Email`),
						Comment:   text.Chars(`This email will be sent instead of default welcome email, after account confirmation.`),
						Type:      element.TypeSelect,
						SortOrder: 110,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `customer_create_account_email_confirmed_template`,
					},

					&element.Field{
						// Path: `customer/create_account/generate_human_friendly_id`,
						ID:        path.NewRoute("generate_human_friendly_id"),
						Label:     text.Chars(`Generate Human-Friendly Customer ID`),
						Type:      element.TypeSelect,
						SortOrder: 120,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("password"),
				Label:     text.Chars(`Password Options`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/password/forgot_email_template`,
						ID:        path.NewRoute("forgot_email_template"),
						Label:     text.Chars(`Forgot Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `customer_password_forgot_email_template`,
					},

					&element.Field{
						// Path: `customer/password/remind_email_template`,
						ID:        path.NewRoute("remind_email_template"),
						Label:     text.Chars(`Remind Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `customer_password_remind_email_template`,
					},

					&element.Field{
						// Path: `customer/password/reset_password_template`,
						ID:        path.NewRoute("reset_password_template"),
						Label:     text.Chars(`Reset Password Template`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `customer_password_reset_password_template`,
					},

					&element.Field{
						// Path: `customer/password/forgot_email_identity`,
						ID:        path.NewRoute("forgot_email_identity"),
						Label:     text.Chars(`Password Template Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `support`,
					},

					&element.Field{
						// Path: `customer/password/reset_link_expiration_period`,
						ID:        path.NewRoute("reset_link_expiration_period"),
						Label:     text.Chars(`Recovery Link Expiration Period (days)`),
						Comment:   text.Chars(`Please enter a number 1 or greater in this field.`),
						Type:      element.TypeText,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   1,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("address"),
				Label:     text.Chars(`Name and Address Options`),
				SortOrder: 40,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/address/street_lines`,
						ID:        path.NewRoute("street_lines"),
						Label:     text.Chars(`Number of Lines in a Street Address`),
						Comment:   text.Chars(`Leave empty for default (2). Valid range: 1-4`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   2,
					},

					&element.Field{
						// Path: `customer/address/prefix_show`,
						ID:        path.NewRoute("prefix_show"),
						Label:     text.Chars(`Show Prefix`),
						Comment:   text.Chars(`The title that goes before name (Mr., Mrs., etc.)`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/address/prefix_options`,
						ID:        path.NewRoute("prefix_options"),
						Label:     text.Chars(`Prefix Dropdown Options`),
						Comment:   text.Chars(`Semicolon (;) separated values.<br/>Put semicolon in the beginning for empty first option.<br/>Leave empty for open text field.`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/address/middlename_show`,
						ID:        path.NewRoute("middlename_show"),
						Label:     text.Chars(`Show Middle Name (initial)`),
						Comment:   text.Chars(`Always optional.`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/address/suffix_show`,
						ID:        path.NewRoute("suffix_show"),
						Label:     text.Chars(`Show Suffix`),
						Comment:   text.Chars(`The suffix that goes after name (Jr., Sr., etc.)`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/address/suffix_options`,
						ID:        path.NewRoute("suffix_options"),
						Label:     text.Chars(`Suffix Dropdown Options`),
						Comment:   text.Chars(`Semicolon (;) separated values.<br/>Put semicolon in the beginning for empty first option.<br/>Leave empty for open text field.`),
						Type:      element.TypeText,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/address/dob_show`,
						ID:        path.NewRoute("dob_show"),
						Label:     text.Chars(`Show Date of Birth`),
						Type:      element.TypeSelect,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/address/taxvat_show`,
						ID:        path.NewRoute("taxvat_show"),
						Label:     text.Chars(`Show Tax/VAT Number`),
						Type:      element.TypeSelect,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `customer/address/gender_show`,
						ID:        path.NewRoute("gender_show"),
						Label:     text.Chars(`Show Gender`),
						Type:      element.TypeSelect,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("startup"),
				Label:     text.Chars(`Login Options`),
				SortOrder: 90,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/startup/redirect_dashboard`,
						ID:        path.NewRoute("redirect_dashboard"),
						Label:     text.Chars(`Redirect Customer to Account Dashboard after Logging in`),
						Comment:   text.Chars(`Customer will stay on the current page if "No" is selected.`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("address_templates"),
				Label:     text.Chars(`Address Templates`),
				SortOrder: 100,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/address_templates/text`,
						ID:        path.NewRoute("text"),
						Label:     text.Chars(`Text`),
						Type:      element.TypeTextarea,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default: `{{depend prefix}}{{var prefix}} {{/depend}}{{var firstname}} {{depend middlename}}{{var middlename}} {{/depend}}{{var lastname}}{{depend suffix}} {{var suffix}}{{/depend}}
{{depend company}}{{var company}}{{/depend}}
{{if street1}}{{var street1}}
{{/if}}
{{depend street2}}{{var street2}}{{/depend}}
{{depend street3}}{{var street3}}{{/depend}}
{{depend street4}}{{var street4}}{{/depend}}
{{if city}}{{var city}},  {{/if}}{{if region}}{{var region}}, {{/if}}{{if postcode}}{{var postcode}}{{/if}}
{{var country}}
T: {{var telephone}}
{{depend fax}}F: {{var fax}}{{/depend}}
{{depend vat_id}}VAT: {{var vat_id}}{{/depend}}`,
					},

					&element.Field{
						// Path: `customer/address_templates/oneline`,
						ID:        path.NewRoute("oneline"),
						Label:     text.Chars(`Text One Line`),
						Type:      element.TypeTextarea,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `{{depend prefix}}{{var prefix}} {{/depend}}{{var firstname}} {{depend middlename}}{{var middlename}} {{/depend}}{{var lastname}}{{depend suffix}} {{var suffix}}{{/depend}}, {{var street}}, {{var city}}, {{var region}} {{var postcode}}, {{var country}}`,
					},

					&element.Field{
						// Path: `customer/address_templates/html`,
						ID:        path.NewRoute("html"),
						Label:     text.Chars(`HTML`),
						Type:      element.TypeTextarea,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default: `{{depend prefix}}{{var prefix}} {{/depend}}{{var firstname}} {{depend middlename}}{{var middlename}} {{/depend}}{{var lastname}}{{depend suffix}} {{var suffix}}{{/depend}}{{depend firstname}}<br/>{{/depend}}
{{depend company}}{{var company}}<br />{{/depend}}
{{if street1}}{{var street1}}<br />{{/if}}
{{depend street2}}{{var street2}}<br />{{/depend}}
{{depend street3}}{{var street3}}<br />{{/depend}}
{{depend street4}}{{var street4}}<br />{{/depend}}
{{if city}}{{var city}},  {{/if}}{{if region}}{{var region}}, {{/if}}{{if postcode}}{{var postcode}}{{/if}}<br/>
{{var country}}<br/>
{{depend telephone}}T: {{var telephone}}{{/depend}}
{{depend fax}}<br/>F: {{var fax}}{{/depend}}
{{depend vat_id}}<br/>VAT: {{var vat_id}}{{/depend}}`,
					},

					&element.Field{
						// Path: `customer/address_templates/pdf`,
						ID:        path.NewRoute("pdf"),
						Label:     text.Chars(`PDF`),
						Type:      element.TypeTextarea,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default: `{{depend prefix}}{{var prefix}} {{/depend}}{{var firstname}} {{depend middlename}}{{var middlename}} {{/depend}}{{var lastname}}{{depend suffix}} {{var suffix}}{{/depend}}|
{{depend company}}{{var company}}|{{/depend}}
{{if street1}}{{var street1}}
{{/if}}
{{depend street2}}{{var street2}}|{{/depend}}
{{depend street3}}{{var street3}}|{{/depend}}
{{depend street4}}{{var street4}}|{{/depend}}
{{if city}}{{var city}},|{{/if}}
{{if region}}{{var region}}, {{/if}}{{if postcode}}{{var postcode}}{{/if}}|
{{var country}}|
{{depend telephone}}T: {{var telephone}}{{/depend}}|
{{depend fax}}<br/>F: {{var fax}}{{/depend}}|
{{depend vat_id}}<br/>VAT: {{var vat_id}}{{/depend}}|`,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("general"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("store_information"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `general/store_information/validate_vat_number`,
						ID:        path.NewRoute("validate_vat_number"),
						Label:     nil,
						Type:      element.TypeText,
						SortOrder: 62,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("customer"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("default"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/default/group`,
						ID:      path.NewRoute("group"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("address"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/address/prefix_show`,
						ID:      path.NewRoute("prefix_show"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `customer/address/prefix_options`,
						ID:      path.NewRoute("prefix_options"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `customer/address/middlename_show`,
						ID:      path.NewRoute("middlename_show"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `customer/address/suffix_show`,
						ID:      path.NewRoute("suffix_show"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `customer/address/suffix_options`,
						ID:      path.NewRoute("suffix_options"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `customer/address/dob_show`,
						ID:      path.NewRoute("dob_show"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `customer/address/gender_show`,
						ID:      path.NewRoute("gender_show"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("dev"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("front_end_development_workflow"),
				Label:     text.Chars(`Front-end development workflow`),
				SortOrder: 8,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/front_end_development_workflow/type`,
						ID:        path.NewRoute("type"),
						Label:     text.Chars(`Workflow type`),
						Comment:   text.Chars(`Not available in production mode`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `server_side_compilation`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("restrict"),
				Label:     text.Chars(`Developer Client Restrictions`),
				SortOrder: 10,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/restrict/allow_ips`,
						ID:        path.NewRoute("allow_ips"),
						Label:     text.Chars(`Allowed IPs (comma separated)`),
						Comment:   text.Chars(`Leave empty for access from any location.`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("dev"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("restrict"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/restrict/allow_ips`,
						ID:      path.NewRoute("allow_ips"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("carriers"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("dhl"),
				Label:     text.Chars(`DHL`),
				SortOrder: 140,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/dhl/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled for Checkout`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/dhl/gateway_url`,
						ID:        path.NewRoute("gateway_url"),
						Label:     text.Chars(`Gateway URL`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `https://xmlpi-ea.dhl.com/XMLShippingServlet`,
					},

					&element.Field{
						// Path: `carriers/dhl/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `DHL`,
					},

					&element.Field{
						// Path: `carriers/dhl/id`,
						ID:        path.NewRoute("id"),
						Label:     text.Chars(`Access ID`),
						Type:      element.TypeObscure,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/password`,
						ID:        path.NewRoute("password"),
						Label:     text.Chars(`Password`),
						Type:      element.TypeObscure,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/account`,
						ID:        path.NewRoute("account"),
						Label:     text.Chars(`Account Number`),
						Type:      element.TypeText,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/content_type`,
						ID:        path.NewRoute("content_type"),
						Label:     text.Chars(`Content Type`),
						Type:      element.TypeSelect,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `N`,
					},

					&element.Field{
						// Path: `carriers/dhl/handling_type`,
						ID:        path.NewRoute("handling_type"),
						Label:     text.Chars(`Calculate Handling Fee`),
						Type:      element.TypeSelect,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `F`,
					},

					&element.Field{
						// Path: `carriers/dhl/handling_action`,
						ID:        path.NewRoute("handling_action"),
						Label:     text.Chars(`Handling Applied`),
						Comment:   text.Chars(`"Per Order" allows a single handling fee for the entire order. "Per Package" allows an individual handling fee for each package.`),
						Type:      element.TypeSelect,
						SortOrder: 110,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `O`,
					},

					&element.Field{
						// Path: `carriers/dhl/handling_fee`,
						ID:        path.NewRoute("handling_fee"),
						Label:     text.Chars(`Handling Fee`),
						Type:      element.TypeText,
						SortOrder: 120,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/divide_order_weight`,
						ID:        path.NewRoute("divide_order_weight"),
						Label:     text.Chars(`Divide Order Weight`),
						Comment:   text.Chars(`This allows breaking total order weight into smaller pieces if it exeeds 70 kg to ensure accurate calculation of shipping charges.`),
						Type:      element.TypeSelect,
						SortOrder: 130,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `carriers/dhl/unit_of_measure`,
						ID:        path.NewRoute("unit_of_measure"),
						Label:     text.Chars(`Weight Unit`),
						Type:      element.TypeSelect,
						SortOrder: 140,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `K`,
					},

					&element.Field{
						// Path: `carriers/dhl/size`,
						ID:        path.NewRoute("size"),
						Label:     text.Chars(`Size`),
						Type:      element.TypeSelect,
						SortOrder: 150,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `R`,
					},

					&element.Field{
						// Path: `carriers/dhl/height`,
						ID:        path.NewRoute("height"),
						Label:     text.Chars(`Height`),
						Type:      element.TypeText,
						SortOrder: 151,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/depth`,
						ID:        path.NewRoute("depth"),
						Label:     text.Chars(`Depth`),
						Type:      element.TypeText,
						SortOrder: 152,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/width`,
						ID:        path.NewRoute("width"),
						Label:     text.Chars(`Width`),
						Type:      element.TypeText,
						SortOrder: 153,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/doc_methods`,
						ID:        path.NewRoute("doc_methods"),
						Label:     text.Chars(`Allowed Methods`),
						Type:      element.TypeMultiselect,
						SortOrder: 170,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `2,5,6,7,9,B,C,D,U,K,L,G,W,I,N,O,R,S,T,X`,
					},

					&element.Field{
						// Path: `carriers/dhl/nondoc_methods`,
						ID:        path.NewRoute("nondoc_methods"),
						Label:     text.Chars(`Allowed Methods`),
						Type:      element.TypeMultiselect,
						SortOrder: 170,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `1,3,4,8,P,Q,E,F,H,J,M,V,Y`,
					},

					&element.Field{
						// Path: `carriers/dhl/ready_time`,
						ID:        path.NewRoute("ready_time"),
						Label:     text.Chars(`Ready time`),
						Comment:   text.Chars(` time after order submission (in hours)`),
						Type:      element.TypeText,
						SortOrder: 180,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/specificerrmsg`,
						ID:        path.NewRoute("specificerrmsg"),
						Label:     text.Chars(`Displayed Error Message`),
						Type:      element.TypeTextarea,
						SortOrder: 800,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `This shipping method is currently unavailable. If you would like to ship using this shipping method, please contact us.`,
					},

					&element.Field{
						// Path: `carriers/dhl/free_method_doc`,
						ID:        path.NewRoute("free_method_doc"),
						Label:     text.Chars(`Free Method`),
						Type:      element.TypeSelect,
						SortOrder: 1200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/free_method_nondoc`,
						ID:        path.NewRoute("free_method_nondoc"),
						Label:     text.Chars(`Free Method`),
						Type:      element.TypeSelect,
						SortOrder: 1200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/free_shipping_enable`,
						ID:        path.NewRoute("free_shipping_enable"),
						Label:     text.Chars(`Free Shipping Amount Threshold`),
						Type:      element.TypeSelect,
						SortOrder: 1210,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/free_shipping_subtotal`,
						ID:        path.NewRoute("free_shipping_subtotal"),
						Label:     text.Chars(`Free Shipping Amount Threshold`),
						Type:      element.TypeText,
						SortOrder: 1220,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/sallowspecific`,
						ID:        path.NewRoute("sallowspecific"),
						Label:     text.Chars(`Ship to Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 1900,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/dhl/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Ship to Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 1910,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/showmethod`,
						ID:        path.NewRoute("showmethod"),
						Label:     text.Chars(`Show Method if Not Applicable`),
						Type:      element.TypeSelect,
						SortOrder: 1940,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 2000,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/dhl/debug`,
						ID:        path.NewRoute("debug"),
						Label:     text.Chars(`Debug`),
						Type:      element.TypeSelect,
						SortOrder: 1950,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("media_storage_configuration"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/media_storage_configuration/allowed_resources`,
						ID:      path.NewRoute("allowed_resources"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"dhl_folder":"dhl"}`,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("carriers"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("dhl"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/dhl/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\Dhl\Model\Carrier`,
					},

					&element.Field{
						// Path: `carriers/dhl/account`,
						ID:      path.NewRoute("account"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `carriers/dhl/free_method`,
						ID:      path.NewRoute("free_method"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `G`,
					},

					&element.Field{
						// Path: `carriers/dhl/shipment_days`,
						ID:      path.NewRoute("shipment_days"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Mon,Tue,Wed,Thu,Fri`,
					},

					&element.Field{
						// Path: `carriers/dhl/active_rma`,
						ID:      path.NewRoute("active_rma"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `carriers/dhl/is_online`,
						ID:      path.NewRoute("is_online"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("catalog"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("downloadable"),
				Label:     text.Chars(`Downloadable Product Options`),
				SortOrder: 600,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/downloadable/order_item_status`,
						ID:        path.NewRoute("order_item_status"),
						Label:     text.Chars(`Order Item Status to Enable Downloads`),
						Type:      element.TypeSelect,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   9,
					},

					&element.Field{
						// Path: `catalog/downloadable/downloads_number`,
						ID:        path.NewRoute("downloads_number"),
						Label:     text.Chars(`Default Maximum Number of Downloads`),
						Type:      element.TypeText,
						SortOrder: 200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   0,
					},

					&element.Field{
						// Path: `catalog/downloadable/shareable`,
						ID:        path.NewRoute("shareable"),
						Label:     text.Chars(`Shareable`),
						Type:      element.TypeSelect,
						SortOrder: 300,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/downloadable/samples_title`,
						ID:        path.NewRoute("samples_title"),
						Label:     text.Chars(`Default Sample Title`),
						Type:      element.TypeText,
						SortOrder: 400,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Samples`,
					},

					&element.Field{
						// Path: `catalog/downloadable/links_title`,
						ID:        path.NewRoute("links_title"),
						Label:     text.Chars(`Default Link Title`),
						Type:      element.TypeText,
						SortOrder: 500,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Links`,
					},

					&element.Field{
						// Path: `catalog/downloadable/links_target_new_window`,
						ID:        path.NewRoute("links_target_new_window"),
						Label:     text.Chars(`Open Links in New Window`),
						Type:      element.TypeSelect,
						SortOrder: 600,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `catalog/downloadable/content_disposition`,
						ID:        path.NewRoute("content_disposition"),
						Label:     text.Chars(`Use Content-Disposition`),
						Type:      element.TypeSelect,
						SortOrder: 700,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `inline`,
					},

					&element.Field{
						// Path: `catalog/downloadable/disable_guest_checkout`,
						ID:        path.NewRoute("disable_guest_checkout"),
						Label:     text.Chars(`Disable Guest Checkout if Cart Contains Downloadable Items`),
						Comment:   text.Chars(`Guest checkout will only work with shareable.`),
						Type:      element.TypeSelect,
						SortOrder: 800,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("carriers"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("fedex"),
				Label:     text.Chars(`FedEx`),
				SortOrder: 120,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/fedex/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled for Checkout`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/fedex/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Federal Express`,
					},

					&element.Field{
						// Path: `carriers/fedex/account`,
						ID:        path.NewRoute("account"),
						Label:     text.Chars(`Account ID`),
						Comment:   text.Chars(`Please make sure to use only digits here. No dashes are allowed.`),
						Type:      element.TypeObscure,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/meter_number`,
						ID:        path.NewRoute("meter_number"),
						Label:     text.Chars(`Meter Number`),
						Type:      element.TypeObscure,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/key`,
						ID:        path.NewRoute("key"),
						Label:     text.Chars(`Key`),
						Type:      element.TypeObscure,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/password`,
						ID:        path.NewRoute("password"),
						Label:     text.Chars(`Password`),
						Type:      element.TypeObscure,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/sandbox_mode`,
						ID:        path.NewRoute("sandbox_mode"),
						Label:     text.Chars(`Sandbox Mode`),
						Type:      element.TypeSelect,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/fedex/production_webservices_url`,
						ID:        path.NewRoute("production_webservices_url"),
						Label:     text.Chars(`Web-Services URL (Production)`),
						Type:      element.TypeText,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `https://ws.fedex.com:443/web-services/`,
					},

					&element.Field{
						// Path: `carriers/fedex/sandbox_webservices_url`,
						ID:        path.NewRoute("sandbox_webservices_url"),
						Label:     text.Chars(`Web-Services URL (Sandbox)`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `https://wsbeta.fedex.com:443/web-services/`,
					},

					&element.Field{
						// Path: `carriers/fedex/shipment_requesttype`,
						ID:        path.NewRoute("shipment_requesttype"),
						Label:     text.Chars(`Packages Request Type`),
						Type:      element.TypeSelect,
						SortOrder: 110,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/fedex/packaging`,
						ID:        path.NewRoute("packaging"),
						Label:     text.Chars(`Packaging`),
						Type:      element.TypeSelect,
						SortOrder: 120,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `YOUR_PACKAGING`,
					},

					&element.Field{
						// Path: `carriers/fedex/dropoff`,
						ID:        path.NewRoute("dropoff"),
						Label:     text.Chars(`Dropoff`),
						Type:      element.TypeSelect,
						SortOrder: 130,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `REGULAR_PICKUP`,
					},

					&element.Field{
						// Path: `carriers/fedex/unit_of_measure`,
						ID:        path.NewRoute("unit_of_measure"),
						Label:     text.Chars(`Weight Unit`),
						Type:      element.TypeSelect,
						SortOrder: 135,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `LB`,
					},

					&element.Field{
						// Path: `carriers/fedex/max_package_weight`,
						ID:        path.NewRoute("max_package_weight"),
						Label:     text.Chars(`Maximum  (Please consult your shipping carrier for maximum supported shipping weight)`),
						Type:      element.TypeText,
						SortOrder: 140,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   150,
					},

					&element.Field{
						// Path: `carriers/fedex/handling_type`,
						ID:        path.NewRoute("handling_type"),
						Label:     text.Chars(`Calculate Handling Fee`),
						Type:      element.TypeSelect,
						SortOrder: 150,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `F`,
					},

					&element.Field{
						// Path: `carriers/fedex/handling_action`,
						ID:        path.NewRoute("handling_action"),
						Label:     text.Chars(`Handling Applied`),
						Type:      element.TypeSelect,
						SortOrder: 160,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `O`,
					},

					&element.Field{
						// Path: `carriers/fedex/handling_fee`,
						ID:        path.NewRoute("handling_fee"),
						Label:     text.Chars(`Handling Fee`),
						Type:      element.TypeText,
						SortOrder: 170,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/residence_delivery`,
						ID:        path.NewRoute("residence_delivery"),
						Label:     text.Chars(`Residential Delivery`),
						Type:      element.TypeSelect,
						SortOrder: 180,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/allowed_methods`,
						ID:        path.NewRoute("allowed_methods"),
						Label:     text.Chars(`Allowed Methods`),
						Type:      element.TypeMultiselect,
						SortOrder: 190,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `EUROPE_FIRST_INTERNATIONAL_PRIORITY,FEDEX_1_DAY_FREIGHT,FEDEX_2_DAY_FREIGHT,FEDEX_2_DAY,FEDEX_2_DAY_AM,FEDEX_3_DAY_FREIGHT,FEDEX_EXPRESS_SAVER,FEDEX_GROUND,FIRST_OVERNIGHT,GROUND_HOME_DELIVERY,INTERNATIONAL_ECONOMY,INTERNATIONAL_ECONOMY_FREIGHT,INTERNATIONAL_FIRST,INTERNATIONAL_GROUND,INTERNATIONAL_PRIORITY,INTERNATIONAL_PRIORITY_FREIGHT,PRIORITY_OVERNIGHT,SMART_POST,STANDARD_OVERNIGHT,FEDEX_FREIGHT,FEDEX_NATIONAL_FREIGHT`,
					},

					&element.Field{
						// Path: `carriers/fedex/smartpost_hubid`,
						ID:        path.NewRoute("smartpost_hubid"),
						Label:     text.Chars(`Hub ID`),
						Comment:   text.Chars(`The field is applicable if the Smart Post method is selected.`),
						Type:      element.TypeText,
						SortOrder: 200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/free_method`,
						ID:        path.NewRoute("free_method"),
						Label:     text.Chars(`Free Method`),
						Type:      element.TypeSelect,
						SortOrder: 210,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `FEDEX_GROUND`,
					},

					&element.Field{
						// Path: `carriers/fedex/free_shipping_enable`,
						ID:        path.NewRoute("free_shipping_enable"),
						Label:     text.Chars(`Free Shipping Amount Threshold`),
						Type:      element.TypeSelect,
						SortOrder: 220,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/free_shipping_subtotal`,
						ID:        path.NewRoute("free_shipping_subtotal"),
						Label:     text.Chars(`Free Shipping Amount Threshold`),
						Type:      element.TypeText,
						SortOrder: 230,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/specificerrmsg`,
						ID:        path.NewRoute("specificerrmsg"),
						Label:     text.Chars(`Displayed Error Message`),
						Type:      element.TypeTextarea,
						SortOrder: 240,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `This shipping method is currently unavailable. If you would like to ship using this shipping method, please contact us.`,
					},

					&element.Field{
						// Path: `carriers/fedex/sallowspecific`,
						ID:        path.NewRoute("sallowspecific"),
						Label:     text.Chars(`Ship to Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 250,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/fedex/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Ship to Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 260,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/debug`,
						ID:        path.NewRoute("debug"),
						Label:     text.Chars(`Debug`),
						Type:      element.TypeSelect,
						SortOrder: 270,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/showmethod`,
						ID:        path.NewRoute("showmethod"),
						Label:     text.Chars(`Show Method if Not Applicable`),
						Type:      element.TypeSelect,
						SortOrder: 280,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/fedex/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 290,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("carriers"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("fedex"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/fedex/cutoff_cost`,
						ID:      path.NewRoute("cutoff_cost"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `carriers/fedex/handling`,
						ID:      path.NewRoute("handling"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `carriers/fedex/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\Fedex\Model\Carrier`,
					},

					&element.Field{
						// Path: `carriers/fedex/active_rma`,
						ID:      path.NewRoute("active_rma"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `carriers/fedex/is_online`,
						ID:      path.NewRoute("is_online"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("sales"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("gift_options"),
				Label:     text.Chars(`Gift Options`),
				SortOrder: 100,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/gift_options/allow_order`,
						ID:        path.NewRoute("allow_order"),
						Label:     text.Chars(`Allow Gift Messages on Order Level`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales/gift_options/allow_items`,
						ID:        path.NewRoute("allow_items"),
						Label:     text.Chars(`Allow Gift Messages for Order Items`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("sales"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("gift_messages"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/gift_messages/allow_items`,
						ID:      path.NewRoute("allow_items"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `sales/gift_messages/allow_order`,
						ID:      path.NewRoute("allow_order"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("google"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("adwords"),
				Label:     text.Chars(`Google AdWords`),
				SortOrder: 15,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `google/adwords/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enable`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `google/adwords/conversion_id`,
						ID:        path.NewRoute("conversion_id"),
						Label:     text.Chars(`Conversion ID`),
						Type:      element.TypeText,
						SortOrder: 11,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/adwords/conversion_language`,
						ID:        path.NewRoute("conversion_language"),
						Label:     text.Chars(`Conversion Language`),
						Type:      element.TypeSelect,
						SortOrder: 12,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `en`,
					},

					&element.Field{
						// Path: `google/adwords/conversion_format`,
						ID:        path.NewRoute("conversion_format"),
						Label:     text.Chars(`Conversion Format`),
						Type:      element.TypeText,
						SortOrder: 13,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   2,
					},

					&element.Field{
						// Path: `google/adwords/conversion_color`,
						ID:        path.NewRoute("conversion_color"),
						Label:     text.Chars(`Conversion Color`),
						Type:      element.TypeText,
						SortOrder: 14,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `FFFFFF`,
					},

					&element.Field{
						// Path: `google/adwords/conversion_label`,
						ID:        path.NewRoute("conversion_label"),
						Label:     text.Chars(`Conversion Label`),
						Type:      element.TypeText,
						SortOrder: 15,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/adwords/conversion_value_type`,
						ID:        path.NewRoute("conversion_value_type"),
						Label:     text.Chars(`Conversion Value Type`),
						Type:      element.TypeSelect,
						SortOrder: 16,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `google/adwords/conversion_value`,
						ID:        path.NewRoute("conversion_value"),
						Label:     text.Chars(`Conversion Value`),
						Type:      element.TypeText,
						SortOrder: 17,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   0,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("google"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("adwords"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `google/adwords/languages`,
						ID:      path.NewRoute("languages"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"ar":"ar","bg":"bg","ca":"ca","cs":"cs","da":"da","de":"de","el":"el","en":"en","es":"es","et":"et","fi":"fi","fr":"fr","hi":"hi","hr":"hr","hu":"hu","id":"id","is":"is","it":"it","iw":"iw","ja":"ja","ko":"ko","lt":"lt","lv":"lv","nl":"nl","no":"no","pl":"pl","pt":"pt","ro":"ro","ru":"ru","sk":"sk","sl":"sl","sr":"sr","sv":"sv","th":"th","tl":"tl","tr":"tr","uk":"uk","ur":"ur","vi":"vi","zh_TW":"zh_TW","zh_CN":"zh_CN"}`,
					},

					&element.Field{
						// Path: `google/adwords/language_convert`,
						ID:      path.NewRoute("language_convert"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"zh_CN":"zh_Hans","zh_TW":"zh_Hant","iw":"he"}`,
					},

					&element.Field{
						// Path: `google/adwords/conversion_js_src`,
						ID:      path.NewRoute("conversion_js_src"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `https://www.googleadservices.com/pagead/conversion.js`,
					},

					&element.Field{
						// Path: `google/adwords/conversion_img_src`,
						ID:      path.NewRoute("conversion_img_src"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `https://www.googleadservices.com/pagead/conversion/%s/?label=%s&guid=ON&script=0`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("google"),
		Label:     text.Chars("Google API"),
		SortOrder: 340,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("analytics"),
				Label:     text.Chars(`Google Analytics`),
				SortOrder: 10,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `google/analytics/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enable`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/analytics/account`,
						ID:        path.NewRoute("account"),
						Label:     text.Chars(`Account Number`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("google"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("analytics"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `google/analytics/experiments`,
						ID:        path.NewRoute("experiments"),
						Label:     text.Chars(`Enable Content Experiments`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("google"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("optimizer"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `google/optimizer/active`,
						ID:      path.NewRoute("active"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("google"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("googleshopping"),
				Label:     text.Chars(`Google Shopping`),
				SortOrder: 20,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `google/googleshopping/account_id`,
						ID:        path.NewRoute("account_id"),
						Label:     text.Chars(`Account ID`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/googleshopping/login`,
						ID:        path.NewRoute("login"),
						Label:     text.Chars(`Account Login`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/googleshopping/password`,
						ID:        path.NewRoute("password"),
						Label:     text.Chars(`Account Password`),
						Type:      element.TypeObscure,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/googleshopping/account_type`,
						ID:        path.NewRoute("account_type"),
						Label:     text.Chars(`Account Type`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `HOSTED_OR_GOOGLE`,
					},

					&element.Field{
						// Path: `google/googleshopping/target_country`,
						ID:        path.NewRoute("target_country"),
						Label:     text.Chars(`Target Country`),
						Type:      element.TypeSelect,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `US`,
					},

					&element.Field{
						// Path: `google/googleshopping/observed`,
						ID:        path.NewRoute("observed"),
						Label:     text.Chars(`Update Google Shopping Item when Product is Updated`),
						Type:      element.TypeSelect,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/googleshopping/verify_meta_tag`,
						ID:        path.NewRoute("verify_meta_tag"),
						Label:     text.Chars(`Verifying Meta Tag`),
						Type:      element.TypeText,
						SortOrder: 110,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/googleshopping/debug`,
						ID:        path.NewRoute("debug"),
						Label:     text.Chars(`Debug`),
						Type:      element.TypeSelect,
						SortOrder: 140,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/googleshopping/destinations`,
						ID:        path.NewRoute("destinations"),
						Label:     text.Chars(`Destinations`),
						Type:      element.TypeText,
						SortOrder: 150,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `{"product_search":"ProductSearch","product_ads":"ProductAds","commerce_search":"CommerceSearch"}`,
					},

					&element.Field{
						// Path: `google/googleshopping/product_search`,
						ID:        path.NewRoute("product_search"),
						Label:     text.Chars(`Google Product Search`),
						Type:      element.TypeSelect,
						SortOrder: 151,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/googleshopping/product_ads`,
						ID:        path.NewRoute("product_ads"),
						Label:     text.Chars(`Product Ads`),
						Type:      element.TypeSelect,
						SortOrder: 152,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `google/googleshopping/commerce_search`,
						ID:        path.NewRoute("commerce_search"),
						Label:     text.Chars(`Commerce Search`),
						Type:      element.TypeSelect,
						SortOrder: 153,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("google"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("googleshopping"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `google/googleshopping/allowed_countries`,
						ID:      path.NewRoute("allowed_countries"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"AU":{"_value":{"name":"Australia","language":"en","currency":"AUD","currency_name":"Australian Dollar"},"_attribute":{"translate":"name currency_name"}},"BR":{"_value":{"name":"Brazil","language":"pt","locale":"pt_BR","currency":"BRL","currency_name":"Brazilian Real"},"_attribute":{"translate":"name currency_name"}},"CN":{"_value":{"name":"China","language":"zh_CN","currency":"CNY","currency_name":"Chinese Yuan Renminbi"},"_attribute":{"translate":"name currency_name"}},"FR":{"_value":{"name":"France","language":"fr","currency":"EUR","currency_name":"Euro"},"_attribute":{"translate":"name currency_name"}},"DE":{"_value":{"name":"Germany","language":"de","locale":"de_DE","currency":"EUR","currency_name":"Euro"},"_attribute":{"translate":"name currency_name"}},"IT":{"_value":{"name":"Italy","language":"it","currency":"EUR","currency_name":"Euro"},"_attribute":{"translate":"name currency_name"}},"JP":{"_value":{"name":"Japan","language":"ja","currency":"JPY","currency_name":"Japanese Yen"},"_attribute":{"translate":"name currency_name"}},"NL":{"_value":{"name":"Netherlands","language":"nl","currency":"EUR","currency_name":"Euro"},"_attribute":{"translate":"name currency_name"}},"ES":{"_value":{"name":"Spain","language":"es","currency":"EUR","currency_name":"Euro"},"_attribute":{"translate":"name currency_name"}},"CH":{"_value":{"name":"Switzerland","language":"de","locale":"de_CH","currency":"CHF","currency_name":"Swiss Franc"},"_attribute":{"translate":"name currency_name"}},"GB":{"_value":{"name":"United Kingdom","language":"en","locale":"en_GB","currency":"GBP","currency_name":"British Pound Sterling"},"_attribute":{"translate":"name currency_name"}},"US":{"_value":{"name":"United States","language":"en","locale":"en_US","currency":"USD","currency_name":"US Dollar"},"_attribute":{"translate":"name currency_name"}}}`,
					},

					&element.Field{
						// Path: `google/googleshopping/attributes`,
						ID:      path.NewRoute("attributes"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"Item":{"title":{"_value":{"name":"Title","required":"1"},"_attribute":{"translate":"name"}},"content":{"_value":{"name":"Description","required":"1"},"_attribute":{"translate":"name"}},"expiration_date":{"_value":{"name":"Expiration date","required":"0"},"_attribute":{"translate":"name"}},"adult":{"_value":{"name":"Adult","required":"0"},"_attribute":{"translate":"name"}}},"ProductSearch":{"condition":{"_value":{"name":"Condition","required":"1"},"_attribute":{"translate":"name"}},"price":{"_value":{"name":"Price","required":"1"},"_attribute":{"translate":"name"}},"sale_price":{"_value":{"name":"Sale Price","required":"0","country":"US"},"_attribute":{"translate":"name"}},"sale_price_effective_date_from":{"_value":{"name":"Sale Price Effective From Date","required":"0","country":"US"},"_attribute":{"translate":"name"}},"sale_price_effective_date_to":{"_value":{"name":"Sale Price Effective To Date","required":"0","country":"US"},"_attribute":{"translate":"name"}},"age_group":{"_value":{"name":"Age Group","required":"1"},"_attribute":{"translate":"name"}},"brand":{"_value":{"name":"Brand","required":"1"},"_attribute":{"translate":"name"}},"color":{"_value":{"name":"Color","required":"1"},"_attribute":{"translate":"name"}},"gender":{"_value":{"name":"Gender","required":"1"},"_attribute":{"translate":"name"}},"mpn":{"_value":{"name":"Manufacturer\\'s Part Number (MPN)","required":"1"},"_attribute":{"translate":"name"}},"online_only":{"_value":{"name":"Online Only","required":"0"},"_attribute":{"translate":"name"}},"gtin":{"_value":{"name":"GTIN","required":"1"},"_attribute":{"translate":"name"}},"product_type":{"_value":{"name":"Product Type (Category)","required":"0"},"_attribute":{"translate":"name"}},"product_review_average":{"_value":{"name":"Product Review Average","required":"0"},"_attribute":{"translate":"name"}},"product_review_count":{"_value":{"name":"Product Review Count","required":"0"},"_attribute":{"translate":"name"}},"shipping_weight":{"_value":{"name":"Shipping Weight","required":"0"},"_attribute":{"translate":"name"}},"size":{"_value":{"name":"Size","required":"1"},"_attribute":{"translate":"name"}},"material":{"_value":{"name":"Material","required":"1"},"_attribute":{"translate":"name"}},"pattern":{"_value":{"name":"Pattern\/Graphic","required":"1"},"_attribute":{"translate":"name"}}},"ProductAds":{"adwords_grouping":{"_value":{"name":"Grouping","required":"0"},"_attribute":{"translate":"name"}},"adwords_labels":{"_value":{"name":"Labels","required":"0"},"_attribute":{"translate":"name"}},"adwords_redirect":{"_value":{"name":"Redirect","required":"0"},"_attribute":{"translate":"name"}},"adwords_queryparam":{"_value":{"name":"Query Param","required":"0"},"_attribute":{"translate":"name"}}}}`,
					},

					&element.Field{
						// Path: `google/googleshopping/attribute_groups`,
						ID:      path.NewRoute("attribute_groups"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"price":{"sale_price":null,"tax":null,"sale_price_effective_date":null,"sale_price_effective_date_from":null,"sale_price_effective_date_to":null},"shipping_weight":{"weight":null},"title":{"name":null},"content":{"description":null}}`,
					},

					&element.Field{
						// Path: `google/googleshopping/base_attributes`,
						ID:      path.NewRoute("base_attributes"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"id":null,"title":null,"link":null,"content":null,"price":null,"image_link":null,"condition":null,"target_country":null,"content_language":null,"destinations":null,"availability":null,"google_product_category":null,"product_type":null}`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("checkout"),
		Label:     nil,
		SortOrder: 305,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("cart"),
				Label:     nil,
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `checkout/cart/grouped_product_image`,
						ID:        path.NewRoute("grouped_product_image"),
						Label:     text.Chars(`Grouped Product Image`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `itself`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("oauth"),
		Label:     text.Chars("OAuth"),
		SortOrder: 300,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("cleanup"),
				Label:     text.Chars(`Cleanup Settings`),
				SortOrder: 300,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `oauth/cleanup/cleanup_probability`,
						ID:        path.NewRoute("cleanup_probability"),
						Label:     text.Chars(`Cleanup Probability`),
						Comment:   text.Chars(`Integer. Launch cleanup in X OAuth requests. 0 (not recommended) - to disable cleanup`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   100,
					},

					&element.Field{
						// Path: `oauth/cleanup/expiration_period`,
						ID:        path.NewRoute("expiration_period"),
						Label:     text.Chars(`Expiration Period`),
						Comment:   text.Chars(`Cleanup entries older than X minutes.`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   120,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("consumer"),
				Label:     text.Chars(`Consumer Settings`),
				SortOrder: 400,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `oauth/consumer/expiration_period`,
						ID:        path.NewRoute("expiration_period"),
						Label:     text.Chars(`Expiration Period`),
						Comment:   text.Chars(`Consumer key/secret will expire if not used within X seconds after Oauth token exchange starts.`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   300,
					},

					&element.Field{
						// Path: `oauth/consumer/post_maxredirects`,
						ID:        path.NewRoute("post_maxredirects"),
						Label:     text.Chars(`OAuth consumer credentials HTTP Post maxredirects`),
						Comment:   text.Chars(`Number of maximum redirects for OAuth consumer credentials Post request.`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   0,
					},

					&element.Field{
						// Path: `oauth/consumer/post_timeout`,
						ID:        path.NewRoute("post_timeout"),
						Label:     text.Chars(`OAuth consumer credentials HTTP Post timeout`),
						Comment:   text.Chars(`Timeout for OAuth consumer credentials Post request within X seconds.`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   5,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("catalog"),
		Label:     nil,
		SortOrder: 40,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("layered_navigation"),
				Label:     text.Chars(`Layered Navigation`),
				SortOrder: 490,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/layered_navigation/display_product_count`,
						ID:        path.NewRoute("display_product_count"),
						Label:     text.Chars(`Display Product Count`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `catalog/layered_navigation/price_range_calculation`,
						ID:        path.NewRoute("price_range_calculation"),
						Label:     text.Chars(`Price Navigation Step Calculation`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `auto`,
					},

					&element.Field{
						// Path: `catalog/layered_navigation/price_range_step`,
						ID:        path.NewRoute("price_range_step"),
						Label:     text.Chars(`Default Price Navigation Step`),
						Type:      element.TypeText,
						SortOrder: 15,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   100,
					},

					&element.Field{
						// Path: `catalog/layered_navigation/price_range_max_intervals`,
						ID:        path.NewRoute("price_range_max_intervals"),
						Label:     text.Chars(`Maximum Number of Price Intervals`),
						Comment:   text.Chars(`Maximum number of price intervals is 100`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   10,
					},

					&element.Field{
						// Path: `catalog/layered_navigation/one_price_interval`,
						ID:        path.NewRoute("one_price_interval"),
						Label:     text.Chars(`Display Price Interval as One Price`),
						Comment:   text.Chars(`This setting will be applied when all prices in the specific price interval are equal.`),
						Type:      element.TypeSelect,
						SortOrder: 15,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `catalog/layered_navigation/interval_division_limit`,
						ID:        path.NewRoute("interval_division_limit"),
						Label:     text.Chars(`Interval Division Limit`),
						Comment:   text.Chars(`Please specify the number of products, that will not be divided into subintervals.`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   9,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("customer"),
		Label:     nil,
		SortOrder: 130,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("online_customers"),
				Label:     text.Chars(`Online Customers Options`),
				SortOrder: 10,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `customer/online_customers/online_minutes_interval`,
						ID:        path.NewRoute("online_minutes_interval"),
						Label:     text.Chars(`Online Minutes Interval`),
						Comment:   text.Chars(`Leave empty for default (15 minutes).`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("system"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("log"),
				Label:     text.Chars(`Log Cleaning`),
				SortOrder: 200,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/log/clean_after_day`,
						ID:        path.NewRoute("clean_after_day"),
						Label:     text.Chars(`Save Log, Days`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   180,
					},

					&element.Field{
						// Path: `system/log/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enable Log Cleaning`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},

					&element.Field{
						// Path: `system/log/time`,
						ID:        path.NewRoute("time"),
						Label:     text.Chars(`Start Time`),
						Type:      element.TypeTime,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/log/frequency`,
						ID:        path.NewRoute("frequency"),
						Label:     text.Chars(`Frequency`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `D`,
					},

					&element.Field{
						// Path: `system/log/error_email`,
						ID:        path.NewRoute("error_email"),
						Label:     text.Chars(`Error Email Recipient`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/log/error_email_identity`,
						ID:        path.NewRoute("error_email_identity"),
						Label:     text.Chars(`Error Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `general`,
					},

					&element.Field{
						// Path: `system/log/error_email_template`,
						ID:        path.NewRoute("error_email_template"),
						Label:     text.Chars(`Error Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 7,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `system_log_error_email_template`,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("log"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("visitor"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `log/visitor/online_update_frequency`,
						ID:      path.NewRoute("online_update_frequency"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: 60,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("log"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/log/time`,
						ID:      path.NewRoute("time"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `system/log/error_email`,
						ID:      path.NewRoute("error_email"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("system"),
		Label:     nil,
		SortOrder: 900,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("media_storage_configuration"),
				Label:     text.Chars(`Storage Configuration for Media`),
				SortOrder: 900,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/media_storage_configuration/media_storage`,
						ID:        path.NewRoute("media_storage"),
						Label:     text.Chars(`Media Storage`),
						Type:      element.TypeSelect,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/media_storage_configuration/media_database`,
						ID:        path.NewRoute("media_database"),
						Label:     text.Chars(`Select Media Database`),
						Type:      element.TypeSelect,
						SortOrder: 200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/media_storage_configuration/synchronize`,
						ID:        path.NewRoute("synchronize"),
						Label:     nil,
						Comment:   text.Chars(`After selecting a new media storage location, press the Synchronize button to transfer all media to that location. Media will not be available in the new location until the synchronization process is complete.`),
						Type:      element.TypeButton,
						SortOrder: 300,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `system/media_storage_configuration/configuration_update_time`,
						ID:        path.NewRoute("configuration_update_time"),
						Label:     text.Chars(`Environment Update Time`),
						Type:      element.TypeText,
						SortOrder: 400,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("sales"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("msrp"),
				Label:     text.Chars(`Minimum Advertised Price`),
				SortOrder: 110,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/msrp/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enable MAP`),
						Comment:   text.Chars(`<strong style="color:red">Warning!</strong> Enabling MAP by default will hide all product prices on the front end.`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `sales/msrp/display_price_type`,
						ID:        path.NewRoute("display_price_type"),
						Label:     text.Chars(`Display Actual Price`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `sales/msrp/explanation_message`,
						ID:        path.NewRoute("explanation_message"),
						Label:     text.Chars(`Default Popup Text Message`),
						Type:      element.TypeTextarea,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Our price is lower than the manufacturer's "minimum advertised price." As a result, we cannot show you the price in catalog or the product page. <br /><br /> You have no obligation to purchase the product once you know the price. You can simply remove the item from your cart.`,
					},

					&element.Field{
						// Path: `sales/msrp/explanation_message_whats_this`,
						ID:        path.NewRoute("explanation_message_whats_this"),
						Label:     text.Chars(`Default "What's This" Text Message`),
						Type:      element.TypeTextarea,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Our price is lower than the manufacturer's "minimum advertised price." As a result, we cannot show you the price in catalog or the product page. <br /><br /> You have no obligation to purchase the product once you know the price. You can simply remove the item from your cart.`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("multishipping"),
		Label:     text.Chars("Multishipping Settings"),
		SortOrder: 311,
		Scope:     scope.PermWebsite,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("options"),
				Label:     text.Chars(`Options`),
				SortOrder: 2,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `multishipping/options/checkout_multiple`,
						ID:        path.NewRoute("checkout_multiple"),
						Label:     text.Chars(`Allow Shipping to Multiple Addresses`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `multishipping/options/checkout_multiple_maximum_qty`,
						ID:        path.NewRoute("checkout_multiple_maximum_qty"),
						Label:     text.Chars(`Maximum Qty Allowed for Shipping to Multiple Addresses`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   100,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("newsletter"),
		Label:     text.Chars("Newsletter"),
		SortOrder: 110,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("subscription"),
				Label:     text.Chars(`Subscription Options`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `newsletter/subscription/allow_guest_subscribe`,
						ID:        path.NewRoute("allow_guest_subscribe"),
						Label:     text.Chars(`Allow Guest Subscription`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `newsletter/subscription/confirm`,
						ID:        path.NewRoute("confirm"),
						Label:     text.Chars(`Need to Confirm`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `newsletter/subscription/confirm_email_identity`,
						ID:        path.NewRoute("confirm_email_identity"),
						Label:     text.Chars(`Confirmation Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `support`,
					},

					&element.Field{
						// Path: `newsletter/subscription/confirm_email_template`,
						ID:        path.NewRoute("confirm_email_template"),
						Label:     text.Chars(`Confirmation Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `newsletter_subscription_confirm_email_template`,
					},

					&element.Field{
						// Path: `newsletter/subscription/success_email_identity`,
						ID:        path.NewRoute("success_email_identity"),
						Label:     text.Chars(`Success Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `general`,
					},

					&element.Field{
						// Path: `newsletter/subscription/success_email_template`,
						ID:        path.NewRoute("success_email_template"),
						Label:     text.Chars(`Success Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `newsletter_subscription_success_email_template`,
					},

					&element.Field{
						// Path: `newsletter/subscription/un_email_identity`,
						ID:        path.NewRoute("un_email_identity"),
						Label:     text.Chars(`Unsubscription Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `support`,
					},

					&element.Field{
						// Path: `newsletter/subscription/un_email_template`,
						ID:        path.NewRoute("un_email_template"),
						Label:     text.Chars(`Unsubscription Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `newsletter_subscription_un_email_template`,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("newsletter"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("sending"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `newsletter/sending/set_return_path`,
						ID:      path.NewRoute("set_return_path"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("payment"),
		Label:     nil,
		SortOrder: 400,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("checkmo"),
				Label:     text.Chars(`Check / Money Order`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/checkmo/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `payment/checkmo/order_status`,
						ID:        path.NewRoute("order_status"),
						Label:     text.Chars(`New Order Status`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `pending`,
					},

					&element.Field{
						// Path: `payment/checkmo/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/checkmo/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Check / Money order`,
					},

					&element.Field{
						// Path: `payment/checkmo/allowspecific`,
						ID:        path.NewRoute("allowspecific"),
						Label:     text.Chars(`Payment from Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   0,
					},

					&element.Field{
						// Path: `payment/checkmo/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Payment from Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 51,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/checkmo/payable_to`,
						ID:        path.NewRoute("payable_to"),
						Label:     text.Chars(`Make Check Payable to`),
						Type:      element.TypeText,
						SortOrder: 61,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/checkmo/mailing_address`,
						ID:        path.NewRoute("mailing_address"),
						Label:     text.Chars(`Send Check to`),
						Type:      element.TypeTextarea,
						SortOrder: 62,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/checkmo/min_order_total`,
						ID:        path.NewRoute("min_order_total"),
						Label:     text.Chars(`Minimum Order Total`),
						Type:      element.TypeText,
						SortOrder: 98,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/checkmo/max_order_total`,
						ID:        path.NewRoute("max_order_total"),
						Label:     text.Chars(`Maximum Order Total`),
						Type:      element.TypeText,
						SortOrder: 99,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/checkmo/model`,
						ID:        path.NewRoute("model"),
						Label:     nil,
						Type:      element.TypeText,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Magento\OfflinePayments\Model\Checkmo`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("purchaseorder"),
				Label:     text.Chars(`Purchase Order`),
				SortOrder: 32,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/purchaseorder/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `payment/purchaseorder/order_status`,
						ID:        path.NewRoute("order_status"),
						Label:     text.Chars(`New Order Status`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `pending`,
					},

					&element.Field{
						// Path: `payment/purchaseorder/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/purchaseorder/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Purchase Order`,
					},

					&element.Field{
						// Path: `payment/purchaseorder/allowspecific`,
						ID:        path.NewRoute("allowspecific"),
						Label:     text.Chars(`Payment from Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   0,
					},

					&element.Field{
						// Path: `payment/purchaseorder/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Payment from Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 51,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/purchaseorder/min_order_total`,
						ID:        path.NewRoute("min_order_total"),
						Label:     text.Chars(`Minimum Order Total`),
						Type:      element.TypeText,
						SortOrder: 98,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/purchaseorder/max_order_total`,
						ID:        path.NewRoute("max_order_total"),
						Label:     text.Chars(`Maximum Order Total`),
						Type:      element.TypeText,
						SortOrder: 99,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/purchaseorder/model`,
						ID:        path.NewRoute("model"),
						Label:     nil,
						Type:      element.TypeText,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Magento\OfflinePayments\Model\Purchaseorder`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("banktransfer"),
				Label:     text.Chars(`Bank Transfer Payment`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/banktransfer/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `payment/banktransfer/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Bank Transfer Payment`,
					},

					&element.Field{
						// Path: `payment/banktransfer/order_status`,
						ID:        path.NewRoute("order_status"),
						Label:     text.Chars(`New Order Status`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `pending`,
					},

					&element.Field{
						// Path: `payment/banktransfer/allowspecific`,
						ID:        path.NewRoute("allowspecific"),
						Label:     text.Chars(`Payment from Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   0,
					},

					&element.Field{
						// Path: `payment/banktransfer/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Payment from Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 51,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/banktransfer/instructions`,
						ID:        path.NewRoute("instructions"),
						Label:     text.Chars(`Instructions`),
						Type:      element.TypeTextarea,
						SortOrder: 62,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/banktransfer/min_order_total`,
						ID:        path.NewRoute("min_order_total"),
						Label:     text.Chars(`Minimum Order Total`),
						Type:      element.TypeText,
						SortOrder: 98,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/banktransfer/max_order_total`,
						ID:        path.NewRoute("max_order_total"),
						Label:     text.Chars(`Maximum Order Total`),
						Type:      element.TypeText,
						SortOrder: 99,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/banktransfer/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("cashondelivery"),
				Label:     text.Chars(`Cash On Delivery Payment`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/cashondelivery/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `payment/cashondelivery/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Cash On Delivery`,
					},

					&element.Field{
						// Path: `payment/cashondelivery/order_status`,
						ID:        path.NewRoute("order_status"),
						Label:     text.Chars(`New Order Status`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `pending`,
					},

					&element.Field{
						// Path: `payment/cashondelivery/allowspecific`,
						ID:        path.NewRoute("allowspecific"),
						Label:     text.Chars(`Payment from Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   0,
					},

					&element.Field{
						// Path: `payment/cashondelivery/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Payment from Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 51,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/cashondelivery/instructions`,
						ID:        path.NewRoute("instructions"),
						Label:     text.Chars(`Instructions`),
						Type:      element.TypeTextarea,
						SortOrder: 62,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/cashondelivery/min_order_total`,
						ID:        path.NewRoute("min_order_total"),
						Label:     text.Chars(`Minimum Order Total`),
						Type:      element.TypeText,
						SortOrder: 98,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/cashondelivery/max_order_total`,
						ID:        path.NewRoute("max_order_total"),
						Label:     text.Chars(`Maximum Order Total`),
						Type:      element.TypeText,
						SortOrder: 99,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/cashondelivery/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("free"),
				Label:     text.Chars(`Zero Subtotal Checkout`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/free/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/free/order_status`,
						ID:        path.NewRoute("order_status"),
						Label:     text.Chars(`New Order Status`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/free/payment_action`,
						ID:        path.NewRoute("payment_action"),
						Label:     text.Chars(`Automatically Invoice All Items`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/free/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/free/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/free/allowspecific`,
						ID:        path.NewRoute("allowspecific"),
						Label:     text.Chars(`Payment from Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/free/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Payment from Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 51,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `payment/free/model`,
						ID:        path.NewRoute("model"),
						Label:     nil,
						Type:      element.TypeText,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("payment"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("checkmo"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/checkmo/group`,
						ID:      path.NewRoute("group"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `offline`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("purchaseorder"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/purchaseorder/group`,
						ID:      path.NewRoute("group"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `offline`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("banktransfer"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/banktransfer/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\OfflinePayments\Model\Banktransfer`,
					},

					&element.Field{
						// Path: `payment/banktransfer/group`,
						ID:      path.NewRoute("group"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `offline`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("cashondelivery"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/cashondelivery/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\OfflinePayments\Model\Cashondelivery`,
					},

					&element.Field{
						// Path: `payment/cashondelivery/group`,
						ID:      path.NewRoute("group"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `offline`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("free"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/free/group`,
						ID:      path.NewRoute("group"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `offline`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("carriers"),
		Label:     nil,
		SortOrder: 320,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("flatrate"),
				Label:     text.Chars(`Flat Rate`),
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/flatrate/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `carriers/flatrate/name`,
						ID:        path.NewRoute("name"),
						Label:     text.Chars(`Method Name`),
						Type:      element.TypeText,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Fixed`,
					},

					&element.Field{
						// Path: `carriers/flatrate/price`,
						ID:        path.NewRoute("price"),
						Label:     text.Chars(`Price`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   5.00,
					},

					&element.Field{
						// Path: `carriers/flatrate/handling_type`,
						ID:        path.NewRoute("handling_type"),
						Label:     text.Chars(`Calculate Handling Fee`),
						Type:      element.TypeSelect,
						SortOrder: 7,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `F`,
					},

					&element.Field{
						// Path: `carriers/flatrate/handling_fee`,
						ID:        path.NewRoute("handling_fee"),
						Label:     text.Chars(`Handling Fee`),
						Type:      element.TypeText,
						SortOrder: 8,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/flatrate/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/flatrate/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Flat Rate`,
					},

					&element.Field{
						// Path: `carriers/flatrate/type`,
						ID:        path.NewRoute("type"),
						Label:     text.Chars(`Type`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `I`,
					},

					&element.Field{
						// Path: `carriers/flatrate/sallowspecific`,
						ID:        path.NewRoute("sallowspecific"),
						Label:     text.Chars(`Ship to Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/flatrate/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Ship to Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 91,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/flatrate/showmethod`,
						ID:        path.NewRoute("showmethod"),
						Label:     text.Chars(`Show Method if Not Applicable`),
						Type:      element.TypeSelect,
						SortOrder: 92,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/flatrate/specificerrmsg`,
						ID:        path.NewRoute("specificerrmsg"),
						Label:     text.Chars(`Displayed Error Message`),
						Type:      element.TypeTextarea,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `This shipping method is not available. To use this shipping method, please contact us.`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("tablerate"),
				Label:     text.Chars(`Table Rates`),
				SortOrder: 3,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/tablerate/handling_type`,
						ID:        path.NewRoute("handling_type"),
						Label:     text.Chars(`Calculate Handling Fee`),
						Type:      element.TypeSelect,
						SortOrder: 7,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `F`,
					},

					&element.Field{
						// Path: `carriers/tablerate/handling_fee`,
						ID:        path.NewRoute("handling_fee"),
						Label:     text.Chars(`Handling Fee`),
						Type:      element.TypeText,
						SortOrder: 8,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/tablerate/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/tablerate/condition_name`,
						ID:        path.NewRoute("condition_name"),
						Label:     text.Chars(`Condition`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `package_weight`,
					},

					&element.Field{
						// Path: `carriers/tablerate/include_virtual_price`,
						ID:        path.NewRoute("include_virtual_price"),
						Label:     text.Chars(`Include Virtual Products in Price Calculation`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `carriers/tablerate/export`,
						ID:        path.NewRoute("export"),
						Label:     text.Chars(`Export`),
						Type:      element.TypeCustom, // @to do: Magento\OfflineShipping\Block\Adminhtml\Form\Field\Export,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/tablerate/import`,
						ID:        path.NewRoute("import"),
						Label:     text.Chars(`Import`),
						Type:      element.TypeCustom, // @to do: Magento\OfflineShipping\Block\Adminhtml\Form\Field\Import,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/tablerate/name`,
						ID:        path.NewRoute("name"),
						Label:     text.Chars(`Method Name`),
						Type:      element.TypeText,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Table Rate`,
					},

					&element.Field{
						// Path: `carriers/tablerate/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/tablerate/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Best Way`,
					},

					&element.Field{
						// Path: `carriers/tablerate/sallowspecific`,
						ID:        path.NewRoute("sallowspecific"),
						Label:     text.Chars(`Ship to Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/tablerate/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Ship to Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 91,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/tablerate/showmethod`,
						ID:        path.NewRoute("showmethod"),
						Label:     text.Chars(`Show Method if Not Applicable`),
						Type:      element.TypeSelect,
						SortOrder: 92,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/tablerate/specificerrmsg`,
						ID:        path.NewRoute("specificerrmsg"),
						Label:     text.Chars(`Displayed Error Message`),
						Type:      element.TypeTextarea,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `This shipping method is not available. To use this shipping method, please contact us.`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("freeshipping"),
				Label:     text.Chars(`Free Shipping`),
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/freeshipping/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/freeshipping/free_shipping_subtotal`,
						ID:        path.NewRoute("free_shipping_subtotal"),
						Label:     text.Chars(`Minimum Order Amount`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/freeshipping/name`,
						ID:        path.NewRoute("name"),
						Label:     text.Chars(`Method Name`),
						Type:      element.TypeText,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Free`,
					},

					&element.Field{
						// Path: `carriers/freeshipping/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/freeshipping/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `Free Shipping`,
					},

					&element.Field{
						// Path: `carriers/freeshipping/sallowspecific`,
						ID:        path.NewRoute("sallowspecific"),
						Label:     text.Chars(`Ship to Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/freeshipping/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Ship to Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 91,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/freeshipping/showmethod`,
						ID:        path.NewRoute("showmethod"),
						Label:     text.Chars(`Show Method if Not Applicable`),
						Type:      element.TypeSelect,
						SortOrder: 92,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/freeshipping/specificerrmsg`,
						ID:        path.NewRoute("specificerrmsg"),
						Label:     text.Chars(`Displayed Error Message`),
						Type:      element.TypeTextarea,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `This shipping method is not available. To use this shipping method, please contact us.`,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("carriers"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("flatrate"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/flatrate/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\OfflineShipping\Model\Carrier\Flatrate`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("tablerate"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/tablerate/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\OfflineShipping\Model\Carrier\Tablerate`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("freeshipping"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/freeshipping/cutoff_cost`,
						ID:      path.NewRoute("cutoff_cost"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: 50,
					},

					&element.Field{
						// Path: `carriers/freeshipping/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\OfflineShipping\Model\Carrier\Freeshipping`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("system"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("full_page_cache"),
				Label:     text.Chars(`Full Page Cache`),
				SortOrder: 600,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/full_page_cache/caching_application`,
						ID:        path.NewRoute("caching_application"),
						Label:     text.Chars(`Caching Application`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   true,
					},

					&element.Field{
						// Path: `system/full_page_cache/ttl`,
						ID:        path.NewRoute("ttl"),
						Label:     text.Chars(`TTL for public content`),
						Comment:   text.Chars(`Public content cache lifetime in seconds. If field is empty default value 120 will be saved.`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   120,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("full_page_cache"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/full_page_cache/varnish3`,
						ID:      path.NewRoute("varnish3"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"path":"Magento\/PageCache\/etc\/varnish3.vcl"}`,
					},

					&element.Field{
						// Path: `system/full_page_cache/varnish4`,
						ID:      path.NewRoute("varnish4"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"path":"Magento\/PageCache\/etc\/varnish4.vcl"}`,
					},

					&element.Field{
						// Path: `system/full_page_cache/default`,
						ID:      path.NewRoute("default"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"access_list":"localhost","backend_host":"localhost","backend_port":"8080","ttl":"120"}`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("payment"),
		Label:     text.Chars("Payment Methods"),
		SortOrder: 400,
		Scope:     scope.PermStore,
		Groups:    element.GroupSlice{},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("payment"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("free"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/free/active`,
						ID:      path.NewRoute("active"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},

					&element.Field{
						// Path: `payment/free/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\Payment\Model\Method\Free`,
					},

					&element.Field{
						// Path: `payment/free/order_status`,
						ID:      path.NewRoute("order_status"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `pending`,
					},

					&element.Field{
						// Path: `payment/free/title`,
						ID:      path.NewRoute("title"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `No Payment Information Required`,
					},

					&element.Field{
						// Path: `payment/free/allowspecific`,
						ID:      path.NewRoute("allowspecific"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `payment/free/sort_order`,
						ID:      path.NewRoute("sort_order"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("substitution"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `payment/substitution/active`,
						ID:      path.NewRoute("active"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `payment/substitution/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\Payment\Model\Method\Substitution`,
					},

					&element.Field{
						// Path: `payment/substitution/allowspecific`,
						ID:      path.NewRoute("allowspecific"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("persistent"),
		Label:     text.Chars("Persistent Shopping Cart"),
		SortOrder: 500,
		Scope:     scope.PermWebsite,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("options"),
				Label:     text.Chars(`General Options`),
				SortOrder: 10,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `persistent/options/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enable Persistence`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `persistent/options/lifetime`,
						ID:        path.NewRoute("lifetime"),
						Label:     text.Chars(`Persistence Lifetime (seconds)`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   31536000,
					},

					&element.Field{
						// Path: `persistent/options/remember_enabled`,
						ID:        path.NewRoute("remember_enabled"),
						Label:     text.Chars(`Enable "Remember Me"`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `persistent/options/remember_default`,
						ID:        path.NewRoute("remember_default"),
						Label:     text.Chars(`"Remember Me" Default Value`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `persistent/options/logout_clear`,
						ID:        path.NewRoute("logout_clear"),
						Label:     text.Chars(`Clear Persistence on Log Out`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `persistent/options/shopping_cart`,
						ID:        path.NewRoute("shopping_cart"),
						Label:     text.Chars(`Persist Shopping Cart`),
						Type:      element.TypeSelect,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("catalog"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("productalert"),
				Label:     text.Chars(`Product Alerts`),
				SortOrder: 250,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/productalert/allow_price`,
						ID:        path.NewRoute("allow_price"),
						Label:     text.Chars(`Allow Alert When Product Price Changes`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `catalog/productalert/allow_stock`,
						ID:        path.NewRoute("allow_stock"),
						Label:     text.Chars(`Allow Alert When Product Comes Back in Stock`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `catalog/productalert/email_price_template`,
						ID:        path.NewRoute("email_price_template"),
						Label:     text.Chars(`Price Alert Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `catalog_productalert_email_price_template`,
					},

					&element.Field{
						// Path: `catalog/productalert/email_stock_template`,
						ID:        path.NewRoute("email_stock_template"),
						Label:     text.Chars(`Stock Alert Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `catalog_productalert_email_stock_template`,
					},

					&element.Field{
						// Path: `catalog/productalert/email_identity`,
						ID:        path.NewRoute("email_identity"),
						Label:     text.Chars(`Alert Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `general`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("productalert_cron"),
				Label:     text.Chars(`Product Alerts Run Settings`),
				SortOrder: 260,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/productalert_cron/frequency`,
						ID:        path.NewRoute("frequency"),
						Label:     text.Chars(`Frequency`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/productalert_cron/time`,
						ID:        path.NewRoute("time"),
						Label:     text.Chars(`Start Time`),
						Type:      element.TypeTime,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/productalert_cron/error_email`,
						ID:        path.NewRoute("error_email"),
						Label:     text.Chars(`Error Email Recipient`),
						Type:      element.TypeText,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/productalert_cron/error_email_identity`,
						ID:        path.NewRoute("error_email_identity"),
						Label:     text.Chars(`Error Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `general`,
					},

					&element.Field{
						// Path: `catalog/productalert_cron/error_email_template`,
						ID:        path.NewRoute("error_email_template"),
						Label:     text.Chars(`Error Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `catalog_productalert_cron_error_email_template`,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("catalog"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("productalert_cron"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/productalert_cron/error_email`,
						ID:      path.NewRoute("error_email"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("catalog"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("recently_products"),
				Label:     text.Chars(`Recently Viewed/Compared Products`),
				SortOrder: 350,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/recently_products/scope`,
						ID:        path.NewRoute("scope"),
						Label:     text.Chars(`Show for Current`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `website`,
					},

					&element.Field{
						// Path: `catalog/recently_products/viewed_count`,
						ID:        path.NewRoute("viewed_count"),
						Label:     text.Chars(`Default Recently Viewed Products Count`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   5,
					},

					&element.Field{
						// Path: `catalog/recently_products/compared_count`,
						ID:        path.NewRoute("compared_count"),
						Label:     text.Chars(`Default Recently Compared Products Count`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   5,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("reports"),
		Label:     text.Chars("Reports"),
		SortOrder: 1000,
		Scope:     scope.PermDefault,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("dashboard"),
				Label:     text.Chars(`Dashboard`),
				SortOrder: 1,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `reports/dashboard/ytd_start`,
						ID:        path.NewRoute("ytd_start"),
						Label:     text.Chars(`Year-To-Date Starts`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `1,1`,
					},

					&element.Field{
						// Path: `reports/dashboard/mtd_start`,
						ID:        path.NewRoute("mtd_start"),
						Label:     text.Chars(`Current Month Starts`),
						Comment:   text.Chars(`Select day of the month.`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   true,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("catalog"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("review"),
				Label:     text.Chars(`Product Reviews`),
				SortOrder: 100,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/review/allow_guest`,
						ID:        path.NewRoute("allow_guest"),
						Label:     text.Chars(`Allow Guests to Write Reviews`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("rss"),
		Label:     text.Chars("RSS Feeds"),
		SortOrder: 80,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("config"),
				Label:     text.Chars(`Rss Config`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `rss/config/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enable RSS`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("sales"),
		Label:     text.Chars("Sales"),
		SortOrder: 300,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("general"),
				Label:     text.Chars(`General`),
				SortOrder: 5,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/general/hide_customer_ip`,
						ID:        path.NewRoute("hide_customer_ip"),
						Label:     text.Chars(`Hide Customer IP`),
						Comment:   text.Chars(`Choose whether a customer IP is shown in orders, invoices, shipments, and credit memos.`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("totals_sort"),
				Label:     text.Chars(`Checkout Totals Sort Order`),
				SortOrder: 10,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/totals_sort/discount`,
						ID:        path.NewRoute("discount"),
						Label:     text.Chars(`Discount`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   20,
					},

					&element.Field{
						// Path: `sales/totals_sort/grand_total`,
						ID:        path.NewRoute("grand_total"),
						Label:     text.Chars(`Grand Total`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   100,
					},

					&element.Field{
						// Path: `sales/totals_sort/shipping`,
						ID:        path.NewRoute("shipping"),
						Label:     text.Chars(`Shipping`),
						Type:      element.TypeText,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   30,
					},

					&element.Field{
						// Path: `sales/totals_sort/subtotal`,
						ID:        path.NewRoute("subtotal"),
						Label:     text.Chars(`Subtotal`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   10,
					},

					&element.Field{
						// Path: `sales/totals_sort/tax`,
						ID:        path.NewRoute("tax"),
						Label:     text.Chars(`Tax`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   40,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("reorder"),
				Label:     text.Chars(`Reorder`),
				SortOrder: 20,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/reorder/allow`,
						ID:        path.NewRoute("allow"),
						Label:     text.Chars(`Allow Reorder`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("identity"),
				Label:     text.Chars(`Invoice and Packing Slip Design`),
				SortOrder: 40,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/identity/logo`,
						ID:        path.NewRoute("logo"),
						Label:     text.Chars(`Logo for PDF Print-outs (200x50)`),
						Comment:   text.Chars(`Your default logo will be used in PDF and HTML documents.<br />(jpeg, tiff, png) If your pdf image is distorted, try to use larger file-size image.`),
						Type:      element.TypeImage,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales/identity/logo_html`,
						ID:        path.NewRoute("logo_html"),
						Label:     text.Chars(`Logo for HTML Print View`),
						Comment:   text.Chars(`Logo for HTML documents only. If empty, default will be used.<br />(jpeg, gif, png)`),
						Type:      element.TypeImage,
						SortOrder: 150,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales/identity/address`,
						ID:        path.NewRoute("address"),
						Label:     text.Chars(`Address`),
						Type:      element.TypeTextarea,
						SortOrder: 200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("minimum_order"),
				Label:     text.Chars(`Minimum Order Amount`),
				SortOrder: 50,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/minimum_order/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enable`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales/minimum_order/amount`,
						ID:        path.NewRoute("amount"),
						Label:     text.Chars(`Minimum Amount`),
						Comment:   text.Chars(`Subtotal after discount`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales/minimum_order/tax_including`,
						ID:        path.NewRoute("tax_including"),
						Label:     text.Chars(`Include Tax to Amount`),
						Type:      element.TypeSelect,
						SortOrder: 15,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `sales/minimum_order/description`,
						ID:        path.NewRoute("description"),
						Label:     text.Chars(`Description Message`),
						Comment:   text.Chars(`This message will be shown in the shopping cart when the subtotal (after discount) is lower than the minimum allowed amount.`),
						Type:      element.TypeTextarea,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales/minimum_order/error_message`,
						ID:        path.NewRoute("error_message"),
						Label:     text.Chars(`Error to Show in Shopping Cart`),
						Type:      element.TypeTextarea,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales/minimum_order/multi_address`,
						ID:        path.NewRoute("multi_address"),
						Label:     text.Chars(`Validate Each Address Separately in Multi-address Checkout`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales/minimum_order/multi_address_description`,
						ID:        path.NewRoute("multi_address_description"),
						Label:     text.Chars(`Multi-address Description Message`),
						Comment:   text.Chars(`We'll use the default description above if you leave this empty.`),
						Type:      element.TypeTextarea,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales/minimum_order/multi_address_error_message`,
						ID:        path.NewRoute("multi_address_error_message"),
						Label:     text.Chars(`Multi-address Error to Show in Shopping Cart`),
						Comment:   text.Chars(`We'll use the default error above if you leave this empty.`),
						Type:      element.TypeTextarea,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("dashboard"),
				Label:     text.Chars(`Dashboard`),
				SortOrder: 60,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/dashboard/use_aggregated_data`,
						ID:        path.NewRoute("use_aggregated_data"),
						Label:     text.Chars(`Use Aggregated Data (beta)`),
						Comment:   text.Chars(`Improves dashboard performance but provides non-realtime data.`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("sales_email"),
		Label:     text.Chars("Sales Emails"),
		SortOrder: 301,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("general"),
				Label:     text.Chars(`General Settings`),
				SortOrder: 0,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_email/general/async_sending`,
						ID:        path.NewRoute("async_sending"),
						Label:     text.Chars(`Asynchronous sending`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("order"),
				Label:     text.Chars(`Order`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_email/order/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `sales_email/order/identity`,
						ID:        path.NewRoute("identity"),
						Label:     text.Chars(`New Order Confirmation Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales`,
					},

					&element.Field{
						// Path: `sales_email/order/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`New Order Confirmation Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_order_template`,
					},

					&element.Field{
						// Path: `sales_email/order/guest_template`,
						ID:        path.NewRoute("guest_template"),
						Label:     text.Chars(`New Order Confirmation Template for Guest`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_order_guest_template`,
					},

					&element.Field{
						// Path: `sales_email/order/copy_to`,
						ID:        path.NewRoute("copy_to"),
						Label:     text.Chars(`Send Order Email Copy To`),
						Comment:   text.Chars(`Comma-separated`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales_email/order/copy_method`,
						ID:        path.NewRoute("copy_method"),
						Label:     text.Chars(`Send Order Email Copy Method`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `bcc`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("order_comment"),
				Label:     text.Chars(`Order Comments`),
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_email/order_comment/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `sales_email/order_comment/identity`,
						ID:        path.NewRoute("identity"),
						Label:     text.Chars(`Order Comment Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales`,
					},

					&element.Field{
						// Path: `sales_email/order_comment/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`Order Comment Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_order_comment_template`,
					},

					&element.Field{
						// Path: `sales_email/order_comment/guest_template`,
						ID:        path.NewRoute("guest_template"),
						Label:     text.Chars(`Order Comment Email Template for Guest`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_order_comment_guest_template`,
					},

					&element.Field{
						// Path: `sales_email/order_comment/copy_to`,
						ID:        path.NewRoute("copy_to"),
						Label:     text.Chars(`Send Order Comment Email Copy To`),
						Comment:   text.Chars(`Comma-separated`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales_email/order_comment/copy_method`,
						ID:        path.NewRoute("copy_method"),
						Label:     text.Chars(`Send Order Comments Email Copy Method`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `bcc`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("invoice"),
				Label:     text.Chars(`Invoice`),
				SortOrder: 3,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_email/invoice/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `sales_email/invoice/identity`,
						ID:        path.NewRoute("identity"),
						Label:     text.Chars(`Invoice Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales`,
					},

					&element.Field{
						// Path: `sales_email/invoice/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`Invoice Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_invoice_template`,
					},

					&element.Field{
						// Path: `sales_email/invoice/guest_template`,
						ID:        path.NewRoute("guest_template"),
						Label:     text.Chars(`Invoice Email Template for Guest`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_invoice_guest_template`,
					},

					&element.Field{
						// Path: `sales_email/invoice/copy_to`,
						ID:        path.NewRoute("copy_to"),
						Label:     text.Chars(`Send Invoice Email Copy To`),
						Comment:   text.Chars(`Comma-separated`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales_email/invoice/copy_method`,
						ID:        path.NewRoute("copy_method"),
						Label:     text.Chars(`Send Invoice Email Copy Method`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `bcc`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("invoice_comment"),
				Label:     text.Chars(`Invoice Comments`),
				SortOrder: 4,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_email/invoice_comment/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `sales_email/invoice_comment/identity`,
						ID:        path.NewRoute("identity"),
						Label:     text.Chars(`Invoice Comment Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales`,
					},

					&element.Field{
						// Path: `sales_email/invoice_comment/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`Invoice Comment Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_invoice_comment_template`,
					},

					&element.Field{
						// Path: `sales_email/invoice_comment/guest_template`,
						ID:        path.NewRoute("guest_template"),
						Label:     text.Chars(`Invoice Comment Email Template for Guest`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_invoice_comment_guest_template`,
					},

					&element.Field{
						// Path: `sales_email/invoice_comment/copy_to`,
						ID:        path.NewRoute("copy_to"),
						Label:     text.Chars(`Send Invoice Comment Email Copy To`),
						Comment:   text.Chars(`Comma-separated`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales_email/invoice_comment/copy_method`,
						ID:        path.NewRoute("copy_method"),
						Label:     text.Chars(`Send Invoice Comments Email Copy Method`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `bcc`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("shipment"),
				Label:     text.Chars(`Shipment`),
				SortOrder: 5,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_email/shipment/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `sales_email/shipment/identity`,
						ID:        path.NewRoute("identity"),
						Label:     text.Chars(`Shipment Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales`,
					},

					&element.Field{
						// Path: `sales_email/shipment/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`Shipment Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_shipment_template`,
					},

					&element.Field{
						// Path: `sales_email/shipment/guest_template`,
						ID:        path.NewRoute("guest_template"),
						Label:     text.Chars(`Shipment Email Template for Guest`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_shipment_guest_template`,
					},

					&element.Field{
						// Path: `sales_email/shipment/copy_to`,
						ID:        path.NewRoute("copy_to"),
						Label:     text.Chars(`Send Shipment Email Copy To`),
						Comment:   text.Chars(`Comma-separated`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales_email/shipment/copy_method`,
						ID:        path.NewRoute("copy_method"),
						Label:     text.Chars(`Send Shipment Email Copy Method`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `bcc`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("shipment_comment"),
				Label:     text.Chars(`Shipment Comments`),
				SortOrder: 6,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_email/shipment_comment/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `sales_email/shipment_comment/identity`,
						ID:        path.NewRoute("identity"),
						Label:     text.Chars(`Shipment Comment Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales`,
					},

					&element.Field{
						// Path: `sales_email/shipment_comment/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`Shipment Comment Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_shipment_comment_template`,
					},

					&element.Field{
						// Path: `sales_email/shipment_comment/guest_template`,
						ID:        path.NewRoute("guest_template"),
						Label:     text.Chars(`Shipment Comment Email Template for Guest`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_shipment_comment_guest_template`,
					},

					&element.Field{
						// Path: `sales_email/shipment_comment/copy_to`,
						ID:        path.NewRoute("copy_to"),
						Label:     text.Chars(`Send Shipment Comment Email Copy To`),
						Comment:   text.Chars(`Comma-separated`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales_email/shipment_comment/copy_method`,
						ID:        path.NewRoute("copy_method"),
						Label:     text.Chars(`Send Shipment Comments Email Copy Method`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `bcc`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("creditmemo"),
				Label:     text.Chars(`Credit Memo`),
				SortOrder: 7,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_email/creditmemo/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `sales_email/creditmemo/identity`,
						ID:        path.NewRoute("identity"),
						Label:     text.Chars(`Credit Memo Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales`,
					},

					&element.Field{
						// Path: `sales_email/creditmemo/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`Credit Memo Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_creditmemo_template`,
					},

					&element.Field{
						// Path: `sales_email/creditmemo/guest_template`,
						ID:        path.NewRoute("guest_template"),
						Label:     text.Chars(`Credit Memo Email Template for Guest`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_creditmemo_guest_template`,
					},

					&element.Field{
						// Path: `sales_email/creditmemo/copy_to`,
						ID:        path.NewRoute("copy_to"),
						Label:     text.Chars(`Send Credit Memo Email Copy To`),
						Comment:   text.Chars(`Comma-separated`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales_email/creditmemo/copy_method`,
						ID:        path.NewRoute("copy_method"),
						Label:     text.Chars(`Send Credit Memo Email Copy Method`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `bcc`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("creditmemo_comment"),
				Label:     text.Chars(`Credit Memo Comments`),
				SortOrder: 8,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_email/creditmemo_comment/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `sales_email/creditmemo_comment/identity`,
						ID:        path.NewRoute("identity"),
						Label:     text.Chars(`Credit Memo Comment Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales`,
					},

					&element.Field{
						// Path: `sales_email/creditmemo_comment/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`Credit Memo Comment Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_creditmemo_comment_template`,
					},

					&element.Field{
						// Path: `sales_email/creditmemo_comment/guest_template`,
						ID:        path.NewRoute("guest_template"),
						Label:     text.Chars(`Credit Memo Comment Email Template for Guest`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sales_email_creditmemo_comment_guest_template`,
					},

					&element.Field{
						// Path: `sales_email/creditmemo_comment/copy_to`,
						ID:        path.NewRoute("copy_to"),
						Label:     text.Chars(`Send Credit Memo Comment Email Copy To`),
						Comment:   text.Chars(`Comma-separated`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sales_email/creditmemo_comment/copy_method`,
						ID:        path.NewRoute("copy_method"),
						Label:     text.Chars(`Send Credit Memo Comments Email Copy Method`),
						Type:      element.TypeSelect,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `bcc`,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("sales_pdf"),
		Label:     text.Chars("PDF Print-outs"),
		SortOrder: 302,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("invoice"),
				Label:     text.Chars(`Invoice`),
				SortOrder: 10,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_pdf/invoice/put_order_id`,
						ID:        path.NewRoute("put_order_id"),
						Label:     text.Chars(`Display Order ID in Header`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("shipment"),
				Label:     text.Chars(`Shipment`),
				SortOrder: 20,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_pdf/shipment/put_order_id`,
						ID:        path.NewRoute("put_order_id"),
						Label:     text.Chars(`Display Order ID in Header`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("creditmemo"),
				Label:     text.Chars(`Credit Memo`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales_pdf/creditmemo/put_order_id`,
						ID:        path.NewRoute("put_order_id"),
						Label:     text.Chars(`Display Order ID in Header`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("rss"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("order"),
				Label:     text.Chars(`Order`),
				SortOrder: 4,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `rss/order/status`,
						ID:        path.NewRoute("status"),
						Label:     text.Chars(`Customer Order Status Notification`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("dev"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("grid"),
				Label:     text.Chars(`Grid Settings`),
				SortOrder: 131,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/grid/async_indexing`,
						ID:        path.NewRoute("async_indexing"),
						Label:     text.Chars(`Asynchronous indexing`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   false,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("promo"),
		Label:     text.Chars("Promotions"),
		SortOrder: 400,
		Scope:     scope.PermDefault,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("auto_generated_coupon_codes"),
				Label:     text.Chars(`Auto Generated Specific Coupon Codes`),
				SortOrder: 10,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `promo/auto_generated_coupon_codes/length`,
						ID:        path.NewRoute("length"),
						Label:     text.Chars(`Code Length`),
						Comment:   text.Chars(`Excluding prefix, suffix and separators.`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   12,
					},

					&element.Field{
						// Path: `promo/auto_generated_coupon_codes/format`,
						ID:        path.NewRoute("format"),
						Label:     text.Chars(`Code Format`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   true,
					},

					&element.Field{
						// Path: `promo/auto_generated_coupon_codes/prefix`,
						ID:        path.NewRoute("prefix"),
						Label:     text.Chars(`Code Prefix`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `promo/auto_generated_coupon_codes/suffix`,
						ID:        path.NewRoute("suffix"),
						Label:     text.Chars(`Code Suffix`),
						Type:      element.TypeText,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `promo/auto_generated_coupon_codes/dash`,
						ID:        path.NewRoute("dash"),
						Label:     text.Chars(`Dash Every X Characters`),
						Comment:   text.Chars(`If empty no separation.`),
						Type:      element.TypeText,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("rss"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("catalog"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `rss/catalog/discounts`,
						ID:        path.NewRoute("discounts"),
						Label:     text.Chars(`Coupons/Discounts`),
						Type:      element.TypeSelect,
						SortOrder: 12,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("catalog"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("search"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `catalog/search/engine`,
						ID:        path.NewRoute("engine"),
						Label:     text.Chars(`Search Engine`),
						Type:      element.TypeSelect,
						SortOrder: 19,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/search/search_type`,
						ID:        path.NewRoute("search_type"),
						Label:     nil,
						Type:      element.TypeText,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `catalog/search/use_layered_navigation_count`,
						ID:        path.NewRoute("use_layered_navigation_count"),
						Label:     nil,
						Type:      element.TypeText,
						SortOrder: 0,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("sendfriend"),
		Label:     text.Chars("Email to a Friend"),
		SortOrder: 120,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("email"),
				Label:     text.Chars(`Email Templates`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sendfriend/email/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `sendfriend/email/template`,
						ID:        path.NewRoute("template"),
						Label:     text.Chars(`Select Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `sendfriend_email_template`,
					},

					&element.Field{
						// Path: `sendfriend/email/allow_guest`,
						ID:        path.NewRoute("allow_guest"),
						Label:     text.Chars(`Allow for Guests`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `sendfriend/email/max_recipients`,
						ID:        path.NewRoute("max_recipients"),
						Label:     text.Chars(`Max Recipients`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   5,
					},

					&element.Field{
						// Path: `sendfriend/email/max_per_hour`,
						ID:        path.NewRoute("max_per_hour"),
						Label:     text.Chars(`Max Products Sent in 1 Hour`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   5,
					},

					&element.Field{
						// Path: `sendfriend/email/check_by`,
						ID:        path.NewRoute("check_by"),
						Label:     text.Chars(`Limit Sending By`),
						Type:      element.TypeSelect,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("shipping"),
		Label:     text.Chars("Shipping Settings"),
		SortOrder: 310,
		Scope:     scope.PermWebsite,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("origin"),
				Label:     text.Chars(`Origin`),
				SortOrder: 1,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `shipping/origin/country_id`,
						ID:        path.NewRoute("country_id"),
						Label:     text.Chars(`Country`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `US`,
					},

					&element.Field{
						// Path: `shipping/origin/region_id`,
						ID:        path.NewRoute("region_id"),
						Label:     text.Chars(`Region/State`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   12,
					},

					&element.Field{
						// Path: `shipping/origin/postcode`,
						ID:        path.NewRoute("postcode"),
						Label:     text.Chars(`ZIP/Postal Code`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   90034,
					},

					&element.Field{
						// Path: `shipping/origin/city`,
						ID:        path.NewRoute("city"),
						Label:     text.Chars(`City`),
						Type:      element.TypeText,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `shipping/origin/street_line1`,
						ID:        path.NewRoute("street_line1"),
						Label:     text.Chars(`Street Address`),
						Type:      element.TypeText,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `shipping/origin/street_line2`,
						ID:        path.NewRoute("street_line2"),
						Label:     text.Chars(`Street Address Line 2`),
						Type:      element.TypeText,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("carriers"),
		Label:     text.Chars("Shipping Methods"),
		SortOrder: 320,
		Scope:     scope.PermStore,
		Groups:    element.GroupSlice{},
	},

	&element.Section{
		ID:        path.NewRoute("sitemap"),
		Label:     text.Chars("XML Sitemap"),
		SortOrder: 70,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("category"),
				Label:     text.Chars(`Categories Options`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sitemap/category/changefreq`,
						ID:        path.NewRoute("changefreq"),
						Label:     text.Chars(`Frequency`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `daily`,
					},

					&element.Field{
						// Path: `sitemap/category/priority`,
						ID:        path.NewRoute("priority"),
						Label:     text.Chars(`Priority`),
						Comment:   text.Chars(`Valid values range from 0.0 to 1.0.`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   0.5,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("product"),
				Label:     text.Chars(`Products Options`),
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sitemap/product/changefreq`,
						ID:        path.NewRoute("changefreq"),
						Label:     text.Chars(`Frequency`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `daily`,
					},

					&element.Field{
						// Path: `sitemap/product/priority`,
						ID:        path.NewRoute("priority"),
						Label:     text.Chars(`Priority`),
						Comment:   text.Chars(`Valid values range from 0.0 to 1.0.`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   1,
					},

					&element.Field{
						// Path: `sitemap/product/image_include`,
						ID:        path.NewRoute("image_include"),
						Label:     text.Chars(`Add Images into Sitemap`),
						Type:      element.TypeSelect,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `all`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("page"),
				Label:     text.Chars(`CMS Pages Options`),
				SortOrder: 3,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sitemap/page/changefreq`,
						ID:        path.NewRoute("changefreq"),
						Label:     text.Chars(`Frequency`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `daily`,
					},

					&element.Field{
						// Path: `sitemap/page/priority`,
						ID:        path.NewRoute("priority"),
						Label:     text.Chars(`Priority`),
						Comment:   text.Chars(`Valid values range from 0.0 to 1.0.`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   0.25,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("generate"),
				Label:     text.Chars(`Generation Settings`),
				SortOrder: 4,
				Scope:     scope.PermDefault,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sitemap/generate/enabled`,
						ID:        path.NewRoute("enabled"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `sitemap/generate/error_email`,
						ID:        path.NewRoute("error_email"),
						Label:     text.Chars(`Error Email Recipient`),
						Type:      element.TypeText,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sitemap/generate/error_email_identity`,
						ID:        path.NewRoute("error_email_identity"),
						Label:     text.Chars(`Error Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 6,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `general`,
					},

					&element.Field{
						// Path: `sitemap/generate/error_email_template`,
						ID:        path.NewRoute("error_email_template"),
						Label:     text.Chars(`Error Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 7,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `sitemap_generate_error_email_template`,
					},

					&element.Field{
						// Path: `sitemap/generate/frequency`,
						ID:        path.NewRoute("frequency"),
						Label:     text.Chars(`Frequency`),
						Type:      element.TypeSelect,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `sitemap/generate/time`,
						ID:        path.NewRoute("time"),
						Label:     text.Chars(`Start Time`),
						Type:      element.TypeTime,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("limit"),
				Label:     text.Chars(`Sitemap File Limits`),
				SortOrder: 5,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sitemap/limit/max_lines`,
						ID:        path.NewRoute("max_lines"),
						Label:     text.Chars(`Maximum No of URLs Per File`),
						Type:      element.TypeText,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   50000,
					},

					&element.Field{
						// Path: `sitemap/limit/max_file_size`,
						ID:        path.NewRoute("max_file_size"),
						Label:     text.Chars(`Maximum File Size`),
						Comment:   text.Chars(`File size in bytes.`),
						Type:      element.TypeText,
						SortOrder: 2,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   10485760,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("search_engines"),
				Label:     text.Chars(`Search Engine Submission Settings`),
				SortOrder: 6,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sitemap/search_engines/submission_robots`,
						ID:        path.NewRoute("submission_robots"),
						Label:     text.Chars(`Enable Submission to Robots.txt`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("sitemap"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("generate"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sitemap/generate/error_email`,
						ID:      path.NewRoute("error_email"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("file"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sitemap/file/valid_paths`,
						ID:      path.NewRoute("valid_paths"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"available":{"any_path":"\/*\/*.xml"}}`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("tax"),
		Label:     text.Chars("Tax"),
		SortOrder: 303,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("classes"),
				Label:     text.Chars(`Tax Classes`),
				SortOrder: 10,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/classes/shipping_tax_class`,
						ID:        path.NewRoute("shipping_tax_class"),
						Label:     text.Chars(`Tax Class for Shipping`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/classes/default_product_tax_class`,
						ID:        path.NewRoute("default_product_tax_class"),
						Label:     text.Chars(`Default Tax Class for Product`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   2,
					},

					&element.Field{
						// Path: `tax/classes/default_customer_tax_class`,
						ID:        path.NewRoute("default_customer_tax_class"),
						Label:     text.Chars(`Default Tax Class for Customer`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   3,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("calculation"),
				Label:     text.Chars(`Calculation Settings`),
				SortOrder: 20,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/calculation/algorithm`,
						ID:        path.NewRoute("algorithm"),
						Label:     text.Chars(`Tax Calculation Method Based On`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `TOTAL_BASE_CALCULATION`,
					},

					&element.Field{
						// Path: `tax/calculation/based_on`,
						ID:        path.NewRoute("based_on"),
						Label:     text.Chars(`Tax Calculation Based On`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `shipping`,
					},

					&element.Field{
						// Path: `tax/calculation/price_includes_tax`,
						ID:        path.NewRoute("price_includes_tax"),
						Label:     text.Chars(`Catalog Prices`),
						Comment:   text.Chars(`This sets whether catalog prices entered by admin include tax.`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/calculation/shipping_includes_tax`,
						ID:        path.NewRoute("shipping_includes_tax"),
						Label:     text.Chars(`Shipping Prices`),
						Comment:   text.Chars(`This sets whether shipping amounts entered by admin or obtained from gateways include tax.`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/calculation/apply_after_discount`,
						ID:        path.NewRoute("apply_after_discount"),
						Label:     text.Chars(`Apply Customer Tax`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/calculation/discount_tax`,
						ID:        path.NewRoute("discount_tax"),
						Label:     text.Chars(`Apply Discount On Prices`),
						Comment:   text.Chars(`Apply discount on price including tax is calculated based on store tax, if "Apply Tax after Discount" is selected.`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `["0","0"]`,
					},

					&element.Field{
						// Path: `tax/calculation/apply_tax_on`,
						ID:        path.NewRoute("apply_tax_on"),
						Label:     text.Chars(`Apply Tax On`),
						Type:      element.TypeSelect,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/calculation/cross_border_trade_enabled`,
						ID:        path.NewRoute("cross_border_trade_enabled"),
						Label:     text.Chars(`Enable Cross Border Trade`),
						Comment:   text.Chars(`When catalog price includes tax, enable this setting will fix the price no matter what the customer's tax rate is.`),
						Type:      element.TypeSelect,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("defaults"),
				Label:     text.Chars(`Default Tax Destination Calculation`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/defaults/country`,
						ID:        path.NewRoute("country"),
						Label:     text.Chars(`Default Country`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `US`,
					},

					&element.Field{
						// Path: `tax/defaults/region`,
						ID:        path.NewRoute("region"),
						Label:     text.Chars(`Default State`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/defaults/postcode`,
						ID:        path.NewRoute("postcode"),
						Label:     text.Chars(`Default Post Code`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `*`,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("display"),
				Label:     text.Chars(`Price Display Settings`),
				SortOrder: 40,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/display/type`,
						ID:        path.NewRoute("type"),
						Label:     text.Chars(`Display Product Prices In Catalog`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/display/shipping`,
						ID:        path.NewRoute("shipping"),
						Label:     text.Chars(`Display Shipping Prices`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("cart_display"),
				Label:     text.Chars(`Shopping Cart Display Settings`),
				SortOrder: 50,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/cart_display/price`,
						ID:        path.NewRoute("price"),
						Label:     text.Chars(`Display Prices`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/cart_display/subtotal`,
						ID:        path.NewRoute("subtotal"),
						Label:     text.Chars(`Display Subtotal`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/cart_display/shipping`,
						ID:        path.NewRoute("shipping"),
						Label:     text.Chars(`Display Shipping Amount`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/cart_display/grandtotal`,
						ID:        path.NewRoute("grandtotal"),
						Label:     text.Chars(`Include Tax In Grand Total`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/cart_display/full_summary`,
						ID:        path.NewRoute("full_summary"),
						Label:     text.Chars(`Display Full Tax Summary`),
						Type:      element.TypeSelect,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/cart_display/zero_tax`,
						ID:        path.NewRoute("zero_tax"),
						Label:     text.Chars(`Display Zero Tax Subtotal`),
						Type:      element.TypeSelect,
						SortOrder: 120,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("sales_display"),
				Label:     text.Chars(`Orders, Invoices, Credit Memos Display Settings`),
				SortOrder: 60,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/sales_display/price`,
						ID:        path.NewRoute("price"),
						Label:     text.Chars(`Display Prices`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/sales_display/subtotal`,
						ID:        path.NewRoute("subtotal"),
						Label:     text.Chars(`Display Subtotal`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/sales_display/shipping`,
						ID:        path.NewRoute("shipping"),
						Label:     text.Chars(`Display Shipping Amount`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/sales_display/grandtotal`,
						ID:        path.NewRoute("grandtotal"),
						Label:     text.Chars(`Include Tax In Grand Total`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/sales_display/full_summary`,
						ID:        path.NewRoute("full_summary"),
						Label:     text.Chars(`Display Full Tax Summary`),
						Type:      element.TypeSelect,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/sales_display/zero_tax`,
						ID:        path.NewRoute("zero_tax"),
						Label:     text.Chars(`Display Zero Tax Subtotal`),
						Type:      element.TypeSelect,
						SortOrder: 120,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   false,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("tax"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("cart_display"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/cart_display/discount`,
						ID:      path.NewRoute("discount"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("sales_display"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/sales_display/discount`,
						ID:      path.NewRoute("discount"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("notification"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/notification/url`,
						ID:      path.NewRoute("url"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `http://www.magentocommerce.com/knowledge-base/entry/magento-ce-18-ee-113-tax-calc`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("design"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("head"),
				Label:     text.Chars(`HTML Head`),
				SortOrder: 20,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/head/shortcut_icon`,
						ID:        path.NewRoute("shortcut_icon"),
						Label:     text.Chars(`Favicon Icon`),
						Comment:   text.Chars(`Allowed file types: ICO, PNG, GIF, JPG, JPEG, APNG, SVG. Not all browsers support all these formats!`),
						Type:      element.TypeImage,
						SortOrder: 5,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/head/default_title`,
						ID:        path.NewRoute("default_title"),
						Label:     text.Chars(`Default Title`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/head/title_prefix`,
						ID:        path.NewRoute("title_prefix"),
						Label:     text.Chars(`Title Prefix`),
						Type:      element.TypeText,
						SortOrder: 12,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/head/title_suffix`,
						ID:        path.NewRoute("title_suffix"),
						Label:     text.Chars(`Title Suffix`),
						Type:      element.TypeText,
						SortOrder: 14,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/head/default_description`,
						ID:        path.NewRoute("default_description"),
						Label:     text.Chars(`Default Description`),
						Type:      element.TypeTextarea,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/head/default_keywords`,
						ID:        path.NewRoute("default_keywords"),
						Label:     text.Chars(`Default Keywords`),
						Type:      element.TypeTextarea,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/head/includes`,
						ID:        path.NewRoute("includes"),
						Label:     text.Chars(`Miscellaneous Scripts`),
						Comment:   text.Chars(`This will be included before head closing tag in page HTML.`),
						Type:      element.TypeTextarea,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/head/demonotice`,
						ID:        path.NewRoute("demonotice"),
						Label:     text.Chars(`Display Demo Store Notice`),
						Type:      element.TypeSelect,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("search_engine_robots"),
				Label:     text.Chars(`Search Engine Robots`),
				SortOrder: 25,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/search_engine_robots/default_robots`,
						ID:        path.NewRoute("default_robots"),
						Label:     text.Chars(`Default Robots`),
						Comment:   text.Chars(`This will be included before head closing tag in page HTML.`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `INDEX,FOLLOW`,
					},

					&element.Field{
						// Path: `design/search_engine_robots/custom_instructions`,
						ID:        path.NewRoute("custom_instructions"),
						Label:     text.Chars(`Edit custom instruction of robots.txt File`),
						Type:      element.TypeTextarea,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/search_engine_robots/reset_to_defaults`,
						ID:        path.NewRoute("reset_to_defaults"),
						Label:     text.Chars(`Reset to Defaults`),
						Comment:   text.Chars(`This action will delete your custom instructions and reset robots.txt file to system's default settings.`),
						Type:      element.TypeButton,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("header"),
				Label:     text.Chars(`Header`),
				SortOrder: 30,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/header/logo_src`,
						ID:        path.NewRoute("logo_src"),
						Label:     text.Chars(`Logo Image`),
						Comment:   text.Chars(`Allowed file types:PNG, GIF, JPG, JPEG, SVG.`),
						Type:      element.TypeImage,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/header/logo_alt`,
						ID:        path.NewRoute("logo_alt"),
						Label:     text.Chars(`Logo Image Alt`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/header/welcome`,
						ID:        path.NewRoute("welcome"),
						Label:     text.Chars(`Welcome Text`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("footer"),
				Label:     text.Chars(`Footer`),
				SortOrder: 40,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/footer/copyright`,
						ID:        path.NewRoute("copyright"),
						Label:     text.Chars(`Copyright`),
						Type:      element.TypeTextarea,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},

					&element.Field{
						// Path: `design/footer/absolute_footer`,
						ID:        path.NewRoute("absolute_footer"),
						Label:     text.Chars(`Miscellaneous HTML`),
						Comment:   text.Chars(`This will be displayed just before body closing tag.`),
						Type:      element.TypeTextarea,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("design"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("head"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/head/_value`,
						ID:      path.NewRoute("_value"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"default_title":"Magento Commerce","default_description":"Default Description","default_keywords":"Magento, Varien, E-commerce","default_media_type":"text\/html","default_charset":"utf-8"}`,
					},

					&element.Field{
						// Path: `design/head/_attribute`,
						ID:      path.NewRoute("_attribute"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"translate":"default_description"}`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("search_engine_robots"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/search_engine_robots/default_custom_instructions`,
						ID:      path.NewRoute("default_custom_instructions"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `
User-agent: *
Disallow: /index.php/
Disallow: /*?
Disallow: /*.js$
Disallow: /*.css$
Disallow: /checkout/
Disallow: /app/
Disallow: /js/
Disallow: /lib/
Disallow: /*.php$
Disallow: /pkginfo/
Disallow: /report/
Disallow: /var/
Disallow: /catalog/
Disallow: /customer/
Disallow: /sendfriend/
Disallow: /review/
Disallow: /*SID=
                    `,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("header"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/header/_value`,
						ID:      path.NewRoute("_value"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"logo_alt":"Magento Commerce","welcome":"Default welcome msg!"}`,
					},

					&element.Field{
						// Path: `design/header/_attribute`,
						ID:      path.NewRoute("_attribute"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"translate":"welcome"}`,
					},
				},
			},

			&element.Group{
				ID: path.NewRoute("footer"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `design/footer/_value`,
						ID:      path.NewRoute("_value"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"copyright":"&copy; 2014 Magento Demo Store. All Rights Reserved."}`,
					},

					&element.Field{
						// Path: `design/footer/_attribute`,
						ID:      path.NewRoute("_attribute"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"translate":"copyright"}`,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("theme"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("customization"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `theme/customization/custom_css`,
						ID:      path.NewRoute("custom_css"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\Theme\Model\Theme\Customization\File\CustomCss`,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("system"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("media_storage_configuration"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `system/media_storage_configuration/allowed_resources`,
						ID:      path.NewRoute("allowed_resources"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"site_favicons":"favicon"}`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("dev"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("js"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/js/translate_strategy`,
						ID:        path.NewRoute("translate_strategy"),
						Label:     text.Chars(`Translation Strategy`),
						Comment:   text.Chars(`Please put your store into maintenance mode and redeploy static files after changing strategy`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `none`,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("dev"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("translate_inline"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `dev/translate_inline/active`,
						ID:      path.NewRoute("active"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `dev/translate_inline/active_admin`,
						ID:      path.NewRoute("active_admin"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `dev/translate_inline/invalid_caches`,
						ID:      path.NewRoute("invalid_caches"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"block_html":null}`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("carriers"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("ups"),
				Label:     text.Chars(`UPS`),
				SortOrder: 100,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/ups/access_license_number`,
						ID:        path.NewRoute("access_license_number"),
						Label:     text.Chars(`Access License Number`),
						Type:      element.TypeObscure,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled for Checkout`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/ups/allowed_methods`,
						ID:        path.NewRoute("allowed_methods"),
						Label:     text.Chars(`Allowed Methods`),
						Type:      element.TypeMultiselect,
						SortOrder: 170,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `1DM,1DML,1DA,1DAL,1DAPI,1DP,1DPL,2DM,2DML,2DA,2DAL,3DS,GND,GNDCOM,GNDRES,STD,XPR,WXS,XPRL,XDM,XDML,XPD,01,02,03,07,08,11,12,14,54,59,65`,
					},

					&element.Field{
						// Path: `carriers/ups/shipment_requesttype`,
						ID:        path.NewRoute("shipment_requesttype"),
						Label:     text.Chars(`Packages Request Type`),
						Type:      element.TypeSelect,
						SortOrder: 47,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/ups/container`,
						ID:        path.NewRoute("container"),
						Label:     text.Chars(`Container`),
						Type:      element.TypeSelect,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `CP`,
					},

					&element.Field{
						// Path: `carriers/ups/free_shipping_enable`,
						ID:        path.NewRoute("free_shipping_enable"),
						Label:     text.Chars(`Free Shipping Amount Threshold`),
						Type:      element.TypeSelect,
						SortOrder: 210,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/free_shipping_subtotal`,
						ID:        path.NewRoute("free_shipping_subtotal"),
						Label:     text.Chars(`Free Shipping Amount Threshold`),
						Type:      element.TypeText,
						SortOrder: 220,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/dest_type`,
						ID:        path.NewRoute("dest_type"),
						Label:     text.Chars(`Destination Type`),
						Type:      element.TypeSelect,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `RES`,
					},

					&element.Field{
						// Path: `carriers/ups/free_method`,
						ID:        path.NewRoute("free_method"),
						Label:     text.Chars(`Free Method`),
						Type:      element.TypeSelect,
						SortOrder: 200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `GND`,
					},

					&element.Field{
						// Path: `carriers/ups/gateway_url`,
						ID:        path.NewRoute("gateway_url"),
						Label:     text.Chars(`Gateway URL`),
						Type:      element.TypeText,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `http://www.ups.com/using/services/rave/qcostcgi.cgi`,
					},

					&element.Field{
						// Path: `carriers/ups/gateway_xml_url`,
						ID:        path.NewRoute("gateway_xml_url"),
						Label:     text.Chars(`Gateway XML URL`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `https://onlinetools.ups.com/ups.app/xml/Rate`,
					},

					&element.Field{
						// Path: `carriers/ups/handling_type`,
						ID:        path.NewRoute("handling_type"),
						Label:     text.Chars(`Calculate Handling Fee`),
						Type:      element.TypeSelect,
						SortOrder: 110,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `F`,
					},

					&element.Field{
						// Path: `carriers/ups/handling_action`,
						ID:        path.NewRoute("handling_action"),
						Label:     text.Chars(`Handling Applied`),
						Type:      element.TypeSelect,
						SortOrder: 120,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `O`,
					},

					&element.Field{
						// Path: `carriers/ups/handling_fee`,
						ID:        path.NewRoute("handling_fee"),
						Label:     text.Chars(`Handling Fee`),
						Type:      element.TypeText,
						SortOrder: 130,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/max_package_weight`,
						ID:        path.NewRoute("max_package_weight"),
						Label:     text.Chars(`Maximum  (Please consult your shipping carrier for maximum supported shipping weight)`),
						Type:      element.TypeText,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   150,
					},

					&element.Field{
						// Path: `carriers/ups/min_package_weight`,
						ID:        path.NewRoute("min_package_weight"),
						Label:     text.Chars(`Minimum  (Please consult your shipping carrier for minimum supported shipping weight)`),
						Type:      element.TypeText,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   0.1,
					},

					&element.Field{
						// Path: `carriers/ups/origin_shipment`,
						ID:        path.NewRoute("origin_shipment"),
						Label:     text.Chars(`Origin of the Shipment`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `Shipments Originating in United States`,
					},

					&element.Field{
						// Path: `carriers/ups/password`,
						ID:        path.NewRoute("password"),
						Label:     text.Chars(`Password`),
						Type:      element.TypeObscure,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/pickup`,
						ID:        path.NewRoute("pickup"),
						Label:     text.Chars(`Pickup Method`),
						Type:      element.TypeSelect,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `CC`,
					},

					&element.Field{
						// Path: `carriers/ups/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 1000,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `United Parcel Service`,
					},

					&element.Field{
						// Path: `carriers/ups/tracking_xml_url`,
						ID:        path.NewRoute("tracking_xml_url"),
						Label:     text.Chars(`Tracking XML URL`),
						Type:      element.TypeText,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `https://www.ups.com/ups.app/xml/Track`,
					},

					&element.Field{
						// Path: `carriers/ups/type`,
						ID:        path.NewRoute("type"),
						Label:     text.Chars(`UPS Type`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `UPS`,
					},

					&element.Field{
						// Path: `carriers/ups/is_account_live`,
						ID:        path.NewRoute("is_account_live"),
						Label:     text.Chars(`Live account`),
						Type:      element.TypeSelect,
						SortOrder: 25,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/ups/unit_of_measure`,
						ID:        path.NewRoute("unit_of_measure"),
						Label:     text.Chars(`Weight Unit`),
						Type:      element.TypeSelect,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `LBS`,
					},

					&element.Field{
						// Path: `carriers/ups/username`,
						ID:        path.NewRoute("username"),
						Label:     text.Chars(`User ID`),
						Type:      element.TypeObscure,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/negotiated_active`,
						ID:        path.NewRoute("negotiated_active"),
						Label:     text.Chars(`Enable Negotiated Rates`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/ups/shipper_number`,
						ID:        path.NewRoute("shipper_number"),
						Label:     text.Chars(`Shipper Number`),
						Comment:   text.Chars(`Required for negotiated rates; 6-character UPS`),
						Type:      element.TypeText,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/sallowspecific`,
						ID:        path.NewRoute("sallowspecific"),
						Label:     text.Chars(`Ship to Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 900,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/ups/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Ship to Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 910,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/showmethod`,
						ID:        path.NewRoute("showmethod"),
						Label:     text.Chars(`Show Method if Not Applicable`),
						Type:      element.TypeSelect,
						SortOrder: 920,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/ups/specificerrmsg`,
						ID:        path.NewRoute("specificerrmsg"),
						Label:     text.Chars(`Displayed Error Message`),
						Type:      element.TypeTextarea,
						SortOrder: 800,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `This shipping method is currently unavailable. If you would like to ship using this shipping method, please contact us.`,
					},

					&element.Field{
						// Path: `carriers/ups/mode_xml`,
						ID:        path.NewRoute("mode_xml"),
						Label:     text.Chars(`Mode`),
						Comment:   text.Chars(`This enables or disables SSL verification of the Magento server by UPS.`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `carriers/ups/debug`,
						ID:        path.NewRoute("debug"),
						Label:     text.Chars(`Debug`),
						Type:      element.TypeSelect,
						SortOrder: 920,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("carriers"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("ups"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/ups/cutoff_cost`,
						ID:      path.NewRoute("cutoff_cost"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `carriers/ups/handling`,
						ID:      path.NewRoute("handling"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `carriers/ups/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\Ups\Model\Carrier`,
					},

					&element.Field{
						// Path: `carriers/ups/active_rma`,
						ID:      path.NewRoute("active_rma"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `carriers/ups/is_online`,
						ID:      path.NewRoute("is_online"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("admin"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("emails"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `admin/emails/reset_password_template`,
						ID:        path.NewRoute("reset_password_template"),
						Label:     text.Chars(`Reset Password Template`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermDefault,
						Default:   `admin_emails_reset_password_template`,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("admin"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("emails"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `admin/emails/forgot_email_template`,
						ID:      path.NewRoute("forgot_email_template"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `admin_emails_forgot_email_template`,
					},

					&element.Field{
						// Path: `admin/emails/forgot_email_identity`,
						ID:      path.NewRoute("forgot_email_identity"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `general`,
					},

					&element.Field{
						// Path: `admin/emails/password_reset_link_expiration_period`,
						ID:      path.NewRoute("password_reset_link_expiration_period"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("carriers"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("usps"),
				Label:     text.Chars(`USPS`),
				SortOrder: 110,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/usps/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled for Checkout`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/usps/gateway_url`,
						ID:        path.NewRoute("gateway_url"),
						Label:     text.Chars(`Gateway URL`),
						Type:      element.TypeText,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `http://production.shippingapis.com/ShippingAPI.dll`,
					},

					&element.Field{
						// Path: `carriers/usps/gateway_secure_url`,
						ID:        path.NewRoute("gateway_secure_url"),
						Label:     text.Chars(`Secure Gateway URL`),
						Type:      element.TypeText,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `https://secure.shippingapis.com/ShippingAPI.dll`,
					},

					&element.Field{
						// Path: `carriers/usps/title`,
						ID:        path.NewRoute("title"),
						Label:     text.Chars(`Title`),
						Type:      element.TypeText,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `United States Postal Service`,
					},

					&element.Field{
						// Path: `carriers/usps/userid`,
						ID:        path.NewRoute("userid"),
						Label:     text.Chars(`User ID`),
						Type:      element.TypeObscure,
						SortOrder: 50,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/password`,
						ID:        path.NewRoute("password"),
						Label:     text.Chars(`Password`),
						Type:      element.TypeObscure,
						SortOrder: 53,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/mode`,
						ID:        path.NewRoute("mode"),
						Label:     text.Chars(`Mode`),
						Type:      element.TypeSelect,
						SortOrder: 54,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/shipment_requesttype`,
						ID:        path.NewRoute("shipment_requesttype"),
						Label:     text.Chars(`Packages Request Type`),
						Type:      element.TypeSelect,
						SortOrder: 55,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/usps/container`,
						ID:        path.NewRoute("container"),
						Label:     text.Chars(`Container`),
						Type:      element.TypeSelect,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `VARIABLE`,
					},

					&element.Field{
						// Path: `carriers/usps/size`,
						ID:        path.NewRoute("size"),
						Label:     text.Chars(`Size`),
						Type:      element.TypeSelect,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `REGULAR`,
					},

					&element.Field{
						// Path: `carriers/usps/width`,
						ID:        path.NewRoute("width"),
						Label:     text.Chars(`Width`),
						Type:      element.TypeText,
						SortOrder: 73,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/length`,
						ID:        path.NewRoute("length"),
						Label:     text.Chars(`Length`),
						Type:      element.TypeText,
						SortOrder: 72,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/height`,
						ID:        path.NewRoute("height"),
						Label:     text.Chars(`Height`),
						Type:      element.TypeText,
						SortOrder: 74,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/girth`,
						ID:        path.NewRoute("girth"),
						Label:     text.Chars(`Girth`),
						Type:      element.TypeText,
						SortOrder: 76,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/machinable`,
						ID:        path.NewRoute("machinable"),
						Label:     text.Chars(`Machinable`),
						Type:      element.TypeSelect,
						SortOrder: 80,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `true`,
					},

					&element.Field{
						// Path: `carriers/usps/max_package_weight`,
						ID:        path.NewRoute("max_package_weight"),
						Label:     text.Chars(`Maximum  (Please consult your shipping carrier for maximum supported shipping weight)`),
						Type:      element.TypeText,
						SortOrder: 90,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   70,
					},

					&element.Field{
						// Path: `carriers/usps/handling_type`,
						ID:        path.NewRoute("handling_type"),
						Label:     text.Chars(`Calculate Handling Fee`),
						Type:      element.TypeSelect,
						SortOrder: 100,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `F`,
					},

					&element.Field{
						// Path: `carriers/usps/handling_action`,
						ID:        path.NewRoute("handling_action"),
						Label:     text.Chars(`Handling Applied`),
						Type:      element.TypeSelect,
						SortOrder: 110,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `O`,
					},

					&element.Field{
						// Path: `carriers/usps/handling_fee`,
						ID:        path.NewRoute("handling_fee"),
						Label:     text.Chars(`Handling Fee`),
						Type:      element.TypeText,
						SortOrder: 120,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/allowed_methods`,
						ID:        path.NewRoute("allowed_methods"),
						Label:     text.Chars(`Allowed Methods`),
						Type:      element.TypeMultiselect,
						SortOrder: 130,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   `0_FCLE,0_FCL,0_FCP,1,2,3,4,6,7,13,16,17,22,23,25,27,28,33,34,35,36,37,42,43,53,55,56,57,61,INT_1,INT_2,INT_4,INT_6,INT_7,INT_8,INT_9,INT_10,INT_11,INT_12,INT_13,INT_14,INT_15,INT_16,INT_20,INT_26`,
					},

					&element.Field{
						// Path: `carriers/usps/free_method`,
						ID:        path.NewRoute("free_method"),
						Label:     text.Chars(`Free Method`),
						Type:      element.TypeSelect,
						SortOrder: 140,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/free_shipping_enable`,
						ID:        path.NewRoute("free_shipping_enable"),
						Label:     text.Chars(`Free Shipping Amount Threshold`),
						Type:      element.TypeSelect,
						SortOrder: 1500,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/free_shipping_subtotal`,
						ID:        path.NewRoute("free_shipping_subtotal"),
						Label:     text.Chars(`Free Shipping Amount Threshold`),
						Type:      element.TypeText,
						SortOrder: 160,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/specificerrmsg`,
						ID:        path.NewRoute("specificerrmsg"),
						Label:     text.Chars(`Displayed Error Message`),
						Type:      element.TypeTextarea,
						SortOrder: 170,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `This shipping method is currently unavailable. If you would like to ship using this shipping method, please contact us.`,
					},

					&element.Field{
						// Path: `carriers/usps/sallowspecific`,
						ID:        path.NewRoute("sallowspecific"),
						Label:     text.Chars(`Ship to Applicable Countries`),
						Type:      element.TypeSelect,
						SortOrder: 180,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `carriers/usps/specificcountry`,
						ID:        path.NewRoute("specificcountry"),
						Label:     text.Chars(`Ship to Specific Countries`),
						Type:      element.TypeMultiselect,
						SortOrder: 190,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/debug`,
						ID:        path.NewRoute("debug"),
						Label:     text.Chars(`Debug`),
						Type:      element.TypeSelect,
						SortOrder: 200,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/showmethod`,
						ID:        path.NewRoute("showmethod"),
						Label:     text.Chars(`Show Method if Not Applicable`),
						Type:      element.TypeSelect,
						SortOrder: 210,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},

					&element.Field{
						// Path: `carriers/usps/sort_order`,
						ID:        path.NewRoute("sort_order"),
						Label:     text.Chars(`Sort Order`),
						Type:      element.TypeText,
						SortOrder: 220,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("carriers"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("usps"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `carriers/usps/cutoff_cost`,
						ID:      path.NewRoute("cutoff_cost"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `carriers/usps/free_method`,
						ID:      path.NewRoute("free_method"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `carriers/usps/handling`,
						ID:      path.NewRoute("handling"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `carriers/usps/methods`,
						ID:      path.NewRoute("methods"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: nil,
					},

					&element.Field{
						// Path: `carriers/usps/model`,
						ID:      path.NewRoute("model"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `Magento\Usps\Model\Carrier`,
					},

					&element.Field{
						// Path: `carriers/usps/isproduction`,
						ID:      path.NewRoute("isproduction"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `carriers/usps/active_rma`,
						ID:      path.NewRoute("active_rma"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: false,
					},

					&element.Field{
						// Path: `carriers/usps/is_online`,
						ID:      path.NewRoute("is_online"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: true,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("webapi"),
		Label:     text.Chars("Magento Web API"),
		SortOrder: 102,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("soap"),
				Label:     text.Chars(`SOAP Settings`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `webapi/soap/charset`,
						ID:        path.NewRoute("charset"),
						Label:     text.Chars(`Default Response Charset`),
						Comment:   text.Chars(`If empty, UTF-8 will be used.`),
						Type:      element.TypeText,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("tax"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("weee"),
				Label:     text.Chars(`Fixed Product Taxes`),
				SortOrder: 100,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `tax/weee/enable`,
						ID:        path.NewRoute("enable"),
						Label:     text.Chars(`Enable FPT`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/weee/display_list`,
						ID:        path.NewRoute("display_list"),
						Label:     text.Chars(`Display Prices In Product Lists`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/weee/display`,
						ID:        path.NewRoute("display"),
						Label:     text.Chars(`Display Prices On Product View Page`),
						Type:      element.TypeSelect,
						SortOrder: 20,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/weee/display_sales`,
						ID:        path.NewRoute("display_sales"),
						Label:     text.Chars(`Display Prices In Sales Modules`),
						Type:      element.TypeSelect,
						SortOrder: 30,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/weee/display_email`,
						ID:        path.NewRoute("display_email"),
						Label:     text.Chars(`Display Prices In Emails`),
						Type:      element.TypeSelect,
						SortOrder: 40,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   true,
					},

					&element.Field{
						// Path: `tax/weee/apply_vat`,
						ID:        path.NewRoute("apply_vat"),
						Label:     text.Chars(`Apply Tax To FPT`),
						Type:      element.TypeSelect,
						SortOrder: 60,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},

					&element.Field{
						// Path: `tax/weee/include_in_subtotal`,
						ID:        path.NewRoute("include_in_subtotal"),
						Label:     text.Chars(`Include FPT In Subtotal`),
						Type:      element.TypeSelect,
						SortOrder: 70,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   false,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("sales"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("totals_sort"),
				Label:     nil,
				SortOrder: 0,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/totals_sort/weee`,
						ID:        path.NewRoute("weee"),
						Label:     text.Chars(`Fixed Product Tax`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   35,
					},
				},
			},
		},
	},

	// Hidden Configuration
	&element.Section{
		ID: path.NewRoute("sales"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("totals_sort"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `sales/totals_sort/weee_tax`,
						ID:      path.NewRoute("weee_tax"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: 35,
					},
				},
			},
		},
	},
	&element.Section{
		ID: path.NewRoute("general"),
		Groups: element.GroupSlice{
			&element.Group{
				ID: path.NewRoute("validator_data"),
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `general/validator_data/input_types`,
						ID:      path.NewRoute("input_types"),
						Type:    element.TypeHidden,
						Visible: element.VisibleNo,
						Scope:   scope.PermDefault,
						Default: `{"weee":"weee"}`,
					},
				},
			},
		},
	},

	&element.Section{
		ID:        path.NewRoute("wishlist"),
		Label:     text.Chars("Wishlist"),
		SortOrder: 140,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("email"),
				Label:     text.Chars(`Share Options`),
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `wishlist/email/email_identity`,
						ID:        path.NewRoute("email_identity"),
						Label:     text.Chars(`Email Sender`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `general`,
					},

					&element.Field{
						// Path: `wishlist/email/email_template`,
						ID:        path.NewRoute("email_template"),
						Label:     text.Chars(`Email Template`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   `wishlist_email_email_template`,
					},

					&element.Field{
						// Path: `wishlist/email/number_limit`,
						ID:        path.NewRoute("number_limit"),
						Label:     text.Chars(`Max Emails Allowed to be Sent`),
						Comment:   text.Chars(`10 by default. Max - 10000`),
						Type:      element.TypeText,
						SortOrder: 3,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   10,
					},

					&element.Field{
						// Path: `wishlist/email/text_limit`,
						ID:        path.NewRoute("text_limit"),
						Label:     text.Chars(`Email Text Length Limit`),
						Comment:   text.Chars(`255 by default`),
						Type:      element.TypeText,
						SortOrder: 4,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   255,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("general"),
				Label:     text.Chars(`General Options`),
				SortOrder: 1,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `wishlist/general/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enabled`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   true,
					},
				},
			},

			&element.Group{
				ID:        path.NewRoute("wishlist_link"),
				Label:     text.Chars(`My Wish List Link`),
				SortOrder: 3,
				Scope:     scope.PermWebsite,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `wishlist/wishlist_link/use_qty`,
						ID:        path.NewRoute("use_qty"),
						Label:     text.Chars(`Display Wish List Summary`),
						Type:      element.TypeSelect,
						SortOrder: 1,
						Visible:   element.VisibleYes,
						Scope:     scope.PermWebsite,
						Default:   nil,
					},
				},
			},
		},
	},
	&element.Section{
		ID:        path.NewRoute("rss"),
		Label:     nil,
		SortOrder: 0,
		Scope:     scope.PermStore,
		Groups: element.GroupSlice{
			&element.Group{
				ID:        path.NewRoute("wishlist"),
				Label:     text.Chars(`Wishlist`),
				SortOrder: 2,
				Scope:     scope.PermStore,
				Fields: element.FieldSlice{
					&element.Field{
						// Path: `rss/wishlist/active`,
						ID:        path.NewRoute("active"),
						Label:     text.Chars(`Enable RSS`),
						Type:      element.TypeSelect,
						SortOrder: 10,
						Visible:   element.VisibleYes,
						Scope:     scope.PermStore,
						Default:   nil,
					},
				},
			},
		},
	},
)
