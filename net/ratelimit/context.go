// Copyright 2015-2016, Cyrill @ Schumacher.fm and the CoreStore contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ratelimit

import (
	"context"
	"net/http"

	"github.com/corestoreio/csfw/util/errors"
)

// keyctxRateLimit type is unexported to prevent collisions with context keys
// defined in other packages.
type keyctxRateLimit struct{}

// ctxRateLimitWrapper to prevent too much calls to runtime.convT2*
type ctxRateLimitWrapper struct {
	// might get extended if reasonable
	err error
}

// wrapContextError creates a new context with an error attached.
func wrapContextError(r *http.Request, err error) *http.Request {
	return r.WithContext(context.WithValue(
		r.Context(),
		keyctxRateLimit{},
		ctxRateLimitWrapper{err: err},
	))
}

// FromContextRateLimit might return an error generated by the ratelimiter while
// processing a request.
func FromContextRateLimit(ctx context.Context) error {
	wrp, ok := ctx.Value(keyctxRateLimit{}).(ctxRateLimitWrapper)
	if !ok {
		return nil
	}
	return errors.Wrap(wrp.err, "[ratelimit] FromContextCountry")
}
