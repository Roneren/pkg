// Code generated by protoc-gen-gogo.
// source: customer_entity_gen.proto
// DO NOT EDIT!

/*
	Package testdata is a generated protocol buffer package.

	It is generated from these files:
		customer_entity_gen.proto

	It has these top-level messages:
		CustomerEntity
		CustomerEntityCollection
*/
package testdata

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *CustomerEntity) Reset()                    { *m = CustomerEntity{} }
func (m *CustomerEntity) String() string            { return proto.CompactTextString(m) }
func (*CustomerEntity) ProtoMessage()               {}
func (*CustomerEntity) Descriptor() ([]byte, []int) { return fileDescriptorCustomerEntityGen, []int{0} }

func (m *CustomerEntity) GetEntityID() uint64 {
	if m != nil {
		return m.EntityID
	}
	return 0
}

func (m *CustomerEntity) GetGroupID() uint64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *CustomerEntity) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *CustomerEntity) GetDisableAutoGroupChange() uint64 {
	if m != nil {
		return m.DisableAutoGroupChange
	}
	return 0
}

func (m *CustomerEntityCollection) Reset()         { *m = CustomerEntityCollection{} }
func (m *CustomerEntityCollection) String() string { return proto.CompactTextString(m) }
func (*CustomerEntityCollection) ProtoMessage()    {}
func (*CustomerEntityCollection) Descriptor() ([]byte, []int) {
	return fileDescriptorCustomerEntityGen, []int{1}
}

func (m *CustomerEntityCollection) GetData() []*CustomerEntity {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CustomerEntity)(nil), "testdata.CustomerEntity")
	proto.RegisterType((*CustomerEntityCollection)(nil), "testdata.CustomerEntityCollection")
}
func (m *CustomerEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerEntity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCustomerEntityGen(dAtA, i, uint64(m.EntityID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCustomerEntityGen(dAtA, i, uint64(m.GroupID))
	}
	if m.IsActive {
		dAtA[i] = 0x48
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableAutoGroupChange != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCustomerEntityGen(dAtA, i, uint64(m.DisableAutoGroupChange))
	}
	return i, nil
}

func (m *CustomerEntityCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerEntityCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCustomerEntityGen(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64CustomerEntityGen(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32CustomerEntityGen(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCustomerEntityGen(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CustomerEntity) Size() (n int) {
	var l int
	_ = l
	if m.EntityID != 0 {
		n += 1 + sovCustomerEntityGen(uint64(m.EntityID))
	}
	if m.GroupID != 0 {
		n += 1 + sovCustomerEntityGen(uint64(m.GroupID))
	}
	if m.IsActive {
		n += 2
	}
	if m.DisableAutoGroupChange != 0 {
		n += 1 + sovCustomerEntityGen(uint64(m.DisableAutoGroupChange))
	}
	return n
}

func (m *CustomerEntityCollection) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovCustomerEntityGen(uint64(l))
		}
	}
	return n
}

func sovCustomerEntityGen(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCustomerEntityGen(x uint64) (n int) {
	return sovCustomerEntityGen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CustomerEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomerEntityGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			m.EntityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomerEntityGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomerEntityGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomerEntityGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAutoGroupChange", wireType)
			}
			m.DisableAutoGroupChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomerEntityGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisableAutoGroupChange |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCustomerEntityGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomerEntityGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerEntityCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomerEntityGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerEntityCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerEntityCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomerEntityGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomerEntityGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CustomerEntity{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomerEntityGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomerEntityGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCustomerEntityGen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCustomerEntityGen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomerEntityGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomerEntityGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCustomerEntityGen
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCustomerEntityGen
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCustomerEntityGen(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCustomerEntityGen = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCustomerEntityGen   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("customer_entity_gen.proto", fileDescriptorCustomerEntityGen) }

var fileDescriptorCustomerEntityGen = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x0d, 0x16, 0x9b, 0xa6, 0x22, 0xb2, 0x87, 0x92, 0xf6, 0xb0, 0x2d, 0x3d, 0x48, 0x05,
	0xdd, 0x82, 0x3e, 0x41, 0xdb, 0x15, 0xdd, 0xeb, 0x82, 0xe7, 0x25, 0xbb, 0x89, 0x69, 0xa0, 0xdd,
	0x94, 0xee, 0x44, 0xf0, 0xad, 0x7c, 0x0c, 0x8f, 0x3e, 0x41, 0x91, 0x88, 0xef, 0x21, 0x9d, 0xd4,
	0x43, 0xc1, 0x5b, 0x66, 0xfe, 0x6f, 0xbe, 0x21, 0xc3, 0xfa, 0x95, 0x6b, 0xc0, 0xae, 0xd5, 0xb6,
	0x50, 0x35, 0x18, 0x78, 0x2b, 0xb4, 0xaa, 0x93, 0xcd, 0xd6, 0x82, 0x8d, 0x28, 0xa8, 0x06, 0xa4,
	0x00, 0x31, 0xb8, 0xd5, 0x06, 0x96, 0xae, 0x4c, 0x2a, 0xbb, 0x9e, 0x6a, 0xab, 0xed, 0x14, 0x81,
	0xd2, 0xbd, 0x60, 0x85, 0x05, 0xbe, 0xc2, 0xe0, 0xf8, 0x87, 0xb0, 0x8b, 0xc5, 0x41, 0xfb, 0x80,
	0xd6, 0xe8, 0x9a, 0x75, 0x0e, 0x7e, 0x23, 0x39, 0x19, 0x91, 0x49, 0x6b, 0x7e, 0xee, 0x77, 0x43,
	0x1a, 0xe2, 0x2c, 0xcd, 0x69, 0x88, 0x33, 0x19, 0x5d, 0x31, 0xaa, 0xb7, 0xd6, 0x6d, 0xf6, 0x64,
	0x0b, 0xc9, 0xae, 0xdf, 0x0d, 0xdb, 0x8f, 0xfb, 0x5e, 0x96, 0xe6, 0x6d, 0x0c, 0x33, 0xb9, 0x57,
	0x9a, 0xa6, 0x10, 0x15, 0x98, 0x57, 0xc5, 0x3b, 0x23, 0x32, 0xa1, 0x41, 0x99, 0x35, 0x33, 0xec,
	0xe5, 0xd4, 0x1c, 0x5e, 0xd1, 0x33, 0xeb, 0x4b, 0xd3, 0x88, 0x72, 0xa5, 0x0a, 0xe1, 0xc0, 0x16,
	0xc1, 0x5f, 0x2d, 0x45, 0xad, 0x15, 0x67, 0xb8, 0x63, 0xe0, 0x77, 0xc3, 0x5e, 0x1a, 0xa0, 0x99,
	0x03, 0x8b, 0xeb, 0x16, 0x48, 0xe4, 0x3d, 0xf9, 0x6f, 0x7f, 0xfc, 0xc4, 0xf8, 0xf1, 0x37, 0x17,
	0x76, 0xb5, 0x52, 0x15, 0x18, 0x5b, 0x47, 0x37, 0xac, 0x95, 0x0a, 0x10, 0x9c, 0x8c, 0x4e, 0x27,
	0xdd, 0x3b, 0x9e, 0xfc, 0xdd, 0x32, 0x39, 0x9e, 0xc8, 0x91, 0x9a, 0x5f, 0x7e, 0xf8, 0x98, 0x7c,
	0xfa, 0x98, 0x7c, 0xf9, 0x98, 0xbc, 0x7f, 0xc7, 0x27, 0xe5, 0x19, 0x9e, 0xf2, 0xfe, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x3a, 0xd2, 0x05, 0xa7, 0xa0, 0x01, 0x00, 0x00,
}
