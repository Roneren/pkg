// Code generated by protoc-gen-gogo.
// source: dmlgen_types_gen.proto
// DO NOT EDIT!

package testdata

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import github_com_corestoreio_csfw_sql_dml "github.com/corestoreio/csfw/sql/dml"
import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (m *DmlgenTypes) Reset()                    { *m = DmlgenTypes{} }
func (m *DmlgenTypes) String() string            { return proto.CompactTextString(m) }
func (*DmlgenTypes) ProtoMessage()               {}
func (*DmlgenTypes) Descriptor() ([]byte, []int) { return fileDescriptorDmlgenTypesGen, []int{0} }

func (m *DmlgenTypesCollection) Reset()         { *m = DmlgenTypesCollection{} }
func (m *DmlgenTypesCollection) String() string { return proto.CompactTextString(m) }
func (*DmlgenTypesCollection) ProtoMessage()    {}
func (*DmlgenTypesCollection) Descriptor() ([]byte, []int) {
	return fileDescriptorDmlgenTypesGen, []int{1}
}

func init() {
	proto.RegisterType((*DmlgenTypes)(nil), "testdata.DmlgenTypes")
	proto.RegisterType((*DmlgenTypesCollection)(nil), "testdata.DmlgenTypesCollection")
}
func (m *DmlgenTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmlgenTypes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ID))
	}
	if m.ColBigint1 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColBigint1.Size()))
		n1, err := m.ColBigint1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ColBigint2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColBigint2))
	}
	if m.ColBigint3 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColBigint3.Size()))
		n2, err := m.ColBigint3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ColBigint4 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColBigint4))
	}
	if len(m.ColBlob) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColBlob)))
		i += copy(dAtA[i:], m.ColBlob)
	}
	if m.ColDate1 != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColDate1)))
		n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ColDate1, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ColDate2 != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColDate2)))
		n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ColDate2, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ColDatetime1 != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColDatetime1)))
		n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ColDatetime1, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ColDatetime2 != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColDatetime2)))
		n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ColDatetime2, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ColDecimal100 != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColDecimal100.Size()))
		n7, err := m.ColDecimal100.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ColDecimal124 != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColDecimal124.Size()))
		n8, err := m.ColDecimal124.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Price124a != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.Price124a.Size()))
		n9, err := m.Price124a.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Price124b != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.Price124b.Size()))
		n10, err := m.Price124b.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ColDecimal123 != 0 {
		dAtA[i] = 0x79
		i++
		i = encodeFixed64DmlgenTypesGen(dAtA, i, uint64(math.Float64bits(float64(m.ColDecimal123))))
	}
	if m.ColDecimal206 != 0 {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64DmlgenTypesGen(dAtA, i, uint64(math.Float64bits(float64(m.ColDecimal206))))
	}
	if m.ColDecimal2412 != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64DmlgenTypesGen(dAtA, i, uint64(math.Float64bits(float64(m.ColDecimal2412))))
	}
	if m.ColFloat != 0 {
		dAtA[i] = 0x91
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64DmlgenTypesGen(dAtA, i, uint64(math.Float64bits(float64(m.ColFloat))))
	}
	if m.ColInt1 != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColInt1.Size()))
		n11, err := m.ColInt1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.ColInt2 != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColInt2))
	}
	if m.ColInt3 != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColInt3.Size()))
		n12, err := m.ColInt3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.ColInt4 != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColInt4))
	}
	if len(m.ColLongtext1) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColLongtext1)))
		i += copy(dAtA[i:], m.ColLongtext1)
	}
	if len(m.ColLongtext2) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColLongtext2)))
		i += copy(dAtA[i:], m.ColLongtext2)
	}
	if len(m.ColMediumblob) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColMediumblob)))
		i += copy(dAtA[i:], m.ColMediumblob)
	}
	if len(m.ColMediumtext1) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColMediumtext1)))
		i += copy(dAtA[i:], m.ColMediumtext1)
	}
	if len(m.ColMediumtext2) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColMediumtext2)))
		i += copy(dAtA[i:], m.ColMediumtext2)
	}
	if m.ColSmallint1 != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColSmallint1.Size()))
		n13, err := m.ColSmallint1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.ColSmallint2 != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColSmallint2))
	}
	if m.ColSmallint3 != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColSmallint3.Size()))
		n14, err := m.ColSmallint3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.ColSmallint4 != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColSmallint4))
	}
	if m.HasSmallint5 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		if m.HasSmallint5 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsSmallint5 != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.IsSmallint5.Size()))
		n15, err := m.IsSmallint5.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.ColText) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColText)))
		i += copy(dAtA[i:], m.ColText)
	}
	if m.ColTimestamp1 != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColTimestamp1)))
		n16, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ColTimestamp1, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.ColTimestamp2 != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColTimestamp2)))
		n17, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ColTimestamp2, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.ColTinyint1 != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(m.ColTinyint1))
	}
	if len(m.ColVarchar1) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColVarchar1)))
		i += copy(dAtA[i:], m.ColVarchar1)
	}
	if len(m.ColVarchar100) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColVarchar100)))
		i += copy(dAtA[i:], m.ColVarchar100)
	}
	if len(m.ColVarchar16) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColVarchar16)))
		i += copy(dAtA[i:], m.ColVarchar16)
	}
	if len(m.ColChar1) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColChar1)))
		i += copy(dAtA[i:], m.ColChar1)
	}
	if len(m.ColChar2) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(len(m.ColChar2)))
		i += copy(dAtA[i:], m.ColChar2)
	}
	return i, nil
}

func (m *DmlgenTypesCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmlgenTypesCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDmlgenTypesGen(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64DmlgenTypesGen(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DmlgenTypesGen(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDmlgenTypesGen(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DmlgenTypes) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDmlgenTypesGen(uint64(m.ID))
	}
	if m.ColBigint1 != nil {
		l = m.ColBigint1.Size()
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColBigint2 != 0 {
		n += 1 + sovDmlgenTypesGen(uint64(m.ColBigint2))
	}
	if m.ColBigint3 != nil {
		l = m.ColBigint3.Size()
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColBigint4 != 0 {
		n += 1 + sovDmlgenTypesGen(uint64(m.ColBigint4))
	}
	l = len(m.ColBlob)
	if l > 0 {
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColDate1 != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColDate1)
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColDate2 != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColDate2)
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColDatetime1 != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColDatetime1)
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColDatetime2 != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColDatetime2)
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColDecimal100 != nil {
		l = m.ColDecimal100.Size()
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColDecimal124 != nil {
		l = m.ColDecimal124.Size()
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.Price124a != nil {
		l = m.Price124a.Size()
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.Price124b != nil {
		l = m.Price124b.Size()
		n += 1 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColDecimal123 != 0 {
		n += 9
	}
	if m.ColDecimal206 != 0 {
		n += 10
	}
	if m.ColDecimal2412 != 0 {
		n += 10
	}
	if m.ColFloat != 0 {
		n += 10
	}
	if m.ColInt1 != nil {
		l = m.ColInt1.Size()
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColInt2 != 0 {
		n += 2 + sovDmlgenTypesGen(uint64(m.ColInt2))
	}
	if m.ColInt3 != nil {
		l = m.ColInt3.Size()
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColInt4 != 0 {
		n += 2 + sovDmlgenTypesGen(uint64(m.ColInt4))
	}
	l = len(m.ColLongtext1)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	l = len(m.ColLongtext2)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	l = len(m.ColMediumblob)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	l = len(m.ColMediumtext1)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	l = len(m.ColMediumtext2)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColSmallint1 != nil {
		l = m.ColSmallint1.Size()
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColSmallint2 != 0 {
		n += 2 + sovDmlgenTypesGen(uint64(m.ColSmallint2))
	}
	if m.ColSmallint3 != nil {
		l = m.ColSmallint3.Size()
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColSmallint4 != 0 {
		n += 2 + sovDmlgenTypesGen(uint64(m.ColSmallint4))
	}
	if m.HasSmallint5 {
		n += 3
	}
	if m.IsSmallint5 != nil {
		l = m.IsSmallint5.Size()
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	l = len(m.ColText)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColTimestamp1 != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColTimestamp1)
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColTimestamp2 != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ColTimestamp2)
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	if m.ColTinyint1 != 0 {
		n += 2 + sovDmlgenTypesGen(uint64(m.ColTinyint1))
	}
	l = len(m.ColVarchar1)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	l = len(m.ColVarchar100)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	l = len(m.ColVarchar16)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	l = len(m.ColChar1)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	l = len(m.ColChar2)
	if l > 0 {
		n += 2 + l + sovDmlgenTypesGen(uint64(l))
	}
	return n
}

func (m *DmlgenTypesCollection) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovDmlgenTypesGen(uint64(l))
		}
	}
	return n
}

func sovDmlgenTypesGen(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDmlgenTypesGen(x uint64) (n int) {
	return sovDmlgenTypesGen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DmlgenTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmlgenTypesGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmlgenTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmlgenTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.NullInt64
			m.ColBigint1 = &v
			if err := m.ColBigint1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint2", wireType)
			}
			m.ColBigint2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColBigint2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.NullInt64
			m.ColBigint3 = &v
			if err := m.ColBigint3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint4", wireType)
			}
			m.ColBigint4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColBigint4 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBlob", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColBlob = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDate1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColDate1 == nil {
				m.ColDate1 = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ColDate1, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDate2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColDate2 == nil {
				m.ColDate2 = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ColDate2, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDatetime1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColDatetime1 == nil {
				m.ColDatetime1 = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ColDatetime1, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDatetime2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColDatetime2 == nil {
				m.ColDatetime2 = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ColDatetime2, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal100", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.NullFloat64
			m.ColDecimal100 = &v
			if err := m.ColDecimal100.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal124", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.NullFloat64
			m.ColDecimal124 = &v
			if err := m.ColDecimal124.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price124a", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.Decimal
			m.Price124a = &v
			if err := m.Price124a.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price124b", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.Decimal
			m.Price124b = &v
			if err := m.Price124b.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal123", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ColDecimal123 = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal206", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ColDecimal206 = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal2412", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ColDecimal2412 = float64(math.Float64frombits(v))
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColFloat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ColFloat = float64(math.Float64frombits(v))
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.NullInt64
			m.ColInt1 = &v
			if err := m.ColInt1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt2", wireType)
			}
			m.ColInt2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColInt2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.NullInt64
			m.ColInt3 = &v
			if err := m.ColInt3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt4", wireType)
			}
			m.ColInt4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColInt4 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColLongtext1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColLongtext1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColLongtext2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColLongtext2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColMediumblob", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColMediumblob = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColMediumtext1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColMediumtext1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColMediumtext2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColMediumtext2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.NullInt64
			m.ColSmallint1 = &v
			if err := m.ColSmallint1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint2", wireType)
			}
			m.ColSmallint2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColSmallint2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.NullInt64
			m.ColSmallint3 = &v
			if err := m.ColSmallint3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint4", wireType)
			}
			m.ColSmallint4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColSmallint4 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSmallint5", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasSmallint5 = bool(v != 0)
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSmallint5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_corestoreio_csfw_sql_dml.NullBool
			m.IsSmallint5 = &v
			if err := m.IsSmallint5.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColTimestamp1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColTimestamp1 == nil {
				m.ColTimestamp1 = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ColTimestamp1, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColTimestamp2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColTimestamp2 == nil {
				m.ColTimestamp2 = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ColTimestamp2, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColTinyint1", wireType)
			}
			m.ColTinyint1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColTinyint1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColVarchar1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColVarchar1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColVarchar100", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColVarchar100 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColVarchar16", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColVarchar16 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColChar1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColChar1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColChar2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColChar2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmlgenTypesGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DmlgenTypesCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmlgenTypesGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmlgenTypesCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmlgenTypesCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DmlgenTypes{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmlgenTypesGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDmlgenTypesGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDmlgenTypesGen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDmlgenTypesGen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDmlgenTypesGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDmlgenTypesGen
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDmlgenTypesGen
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDmlgenTypesGen(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDmlgenTypesGen = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDmlgenTypesGen   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dmlgen_types_gen.proto", fileDescriptorDmlgenTypesGen) }

var fileDescriptorDmlgenTypesGen = []byte{
	// 1107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x5d, 0x73, 0xdb, 0x44,
	0x17, 0xc7, 0xab, 0x24, 0xcd, 0x8b, 0xfc, 0x92, 0x64, 0x9f, 0x24, 0xdd, 0xe6, 0x01, 0x4b, 0x84,
	0x97, 0x2a, 0x01, 0x6c, 0x69, 0xa5, 0xfa, 0xa2, 0x93, 0xce, 0x74, 0x94, 0xc0, 0x34, 0x0c, 0x74,
	0x18, 0x91, 0xe9, 0x0c, 0x9d, 0x32, 0x42, 0x96, 0x15, 0x45, 0x83, 0xec, 0x75, 0x6d, 0x05, 0xda,
	0x6f, 0xc1, 0xd7, 0xe0, 0x8e, 0x8f, 0x91, 0x4b, 0xae, 0xb9, 0x30, 0x60, 0xbe, 0x08, 0xb3, 0x67,
	0x25, 0x79, 0x25, 0x31, 0xe3, 0x00, 0xb9, 0xdb, 0x23, 0x9f, 0xdf, 0xff, 0x1c, 0xed, 0x39, 0x7b,
	0xb4, 0x96, 0xf7, 0xfa, 0x83, 0x38, 0x0c, 0x86, 0x6e, 0xf2, 0x66, 0x14, 0x4c, 0xdc, 0x30, 0x18,
	0xb6, 0x47, 0x63, 0x9a, 0x50, 0xb4, 0x9e, 0x04, 0x93, 0xa4, 0xef, 0x25, 0xde, 0xfe, 0xc7, 0x61,
	0x94, 0x5c, 0x5e, 0xf5, 0xda, 0x3e, 0x1d, 0x74, 0x42, 0x1a, 0xd2, 0x0e, 0x38, 0xf4, 0xae, 0x2e,
	0xc0, 0x02, 0x03, 0x56, 0x1c, 0xdc, 0x57, 0x42, 0x4a, 0xc3, 0x38, 0x98, 0x7b, 0x25, 0xd1, 0x20,
	0x98, 0x24, 0xde, 0x60, 0xc4, 0x1d, 0x0e, 0x7e, 0xba, 0x27, 0xd7, 0x4e, 0x21, 0xe8, 0x39, 0x8b,
	0x89, 0xf6, 0xe4, 0xa5, 0xa8, 0x8f, 0x25, 0x55, 0xd2, 0xee, 0xda, 0xab, 0xb3, 0xa9, 0xb2, 0x74,
	0x76, 0xea, 0x2c, 0x45, 0x7d, 0x14, 0xc8, 0x75, 0x9f, 0xc6, 0x6e, 0x2f, 0x0a, 0xa3, 0x61, 0xe2,
	0x1a, 0x78, 0x49, 0x95, 0xb4, 0xba, 0x7d, 0x72, 0x3d, 0x55, 0xa4, 0x5f, 0xa7, 0x8a, 0x98, 0x95,
	0x4f, 0xc7, 0xc1, 0x24, 0xa1, 0xe3, 0x20, 0xa2, 0x1d, 0x7f, 0x72, 0xf1, 0x43, 0x67, 0xf2, 0x2a,
	0xee, 0xf4, 0x07, 0x71, 0xfb, 0xd9, 0x55, 0x1c, 0x9f, 0x0d, 0x93, 0xae, 0x35, 0x9b, 0x2a, 0xf2,
	0x09, 0x8d, 0x6d, 0xd0, 0x32, 0x1c, 0xd9, 0xcf, 0xd7, 0x48, 0x2f, 0x84, 0x21, 0x78, 0x59, 0x95,
	0xb4, 0x65, 0xbb, 0x59, 0x20, 0x88, 0x40, 0x90, 0x52, 0x62, 0x26, 0x5e, 0xb9, 0xad, 0xc4, 0x4c,
	0x21, 0x8c, 0x59, 0x4a, 0xcc, 0xc2, 0x77, 0x55, 0x49, 0x5b, 0x29, 0x25, 0x66, 0x09, 0x84, 0x85,
	0x8e, 0xe4, 0x75, 0x20, 0x62, 0xda, 0xc3, 0xab, 0xaa, 0xa4, 0x6d, 0xd8, 0x9b, 0x2c, 0xa9, 0xd9,
	0x54, 0x59, 0x63, 0x44, 0x4c, 0x7b, 0xce, 0x9a, 0xcf, 0x17, 0xe8, 0x99, 0xcc, 0x48, 0xb7, 0xef,
	0x25, 0x81, 0x6b, 0xe0, 0x35, 0x55, 0xd2, 0x6a, 0x64, 0xbf, 0xcd, 0x6b, 0xd7, 0xce, 0x6a, 0xd7,
	0x3e, 0xcf, 0x6a, 0x67, 0xef, 0xa4, 0x4a, 0xeb, 0x27, 0x34, 0x3e, 0xf5, 0x92, 0xc0, 0xf8, 0xf1,
	0x37, 0x45, 0x72, 0x58, 0x3c, 0xb0, 0xd0, 0x67, 0x82, 0x1e, 0xc1, 0xeb, 0x0b, 0xf5, 0xb6, 0x04,
	0x2d, 0x52, 0xd0, 0x22, 0xe8, 0x85, 0xdc, 0xcc, 0xb4, 0x58, 0xf3, 0xb8, 0x06, 0xde, 0x58, 0xa8,
	0x87, 0xd3, 0xfc, 0xea, 0xa9, 0x26, 0x03, 0x79, 0x8e, 0x75, 0x5f, 0x78, 0x82, 0x9e, 0x97, 0xb4,
	0x09, 0x96, 0x17, 0xbf, 0x7b, 0x49, 0x97, 0x54, 0x74, 0x09, 0x7a, 0x25, 0x6f, 0x81, 0x6e, 0xe0,
	0x47, 0x03, 0x2f, 0x76, 0x0d, 0xdd, 0xd5, 0x71, 0x0d, 0x1a, 0xe3, 0x69, 0xda, 0x18, 0x9d, 0x9b,
	0x36, 0xc6, 0xa7, 0x31, 0xf5, 0x78, 0x6b, 0x34, 0x58, 0x50, 0xae, 0x68, 0xe8, 0xba, 0xd3, 0xf0,
	0x45, 0xb3, 0x12, 0x92, 0xb8, 0x16, 0xae, 0xdf, 0x66, 0x48, 0x62, 0x15, 0x42, 0x12, 0x0b, 0x7d,
	0x2b, 0xd7, 0x46, 0xe3, 0xc8, 0x0f, 0x20, 0x98, 0x87, 0x1b, 0x10, 0xed, 0x49, 0x1a, 0xed, 0xc3,
	0x9b, 0x44, 0x4b, 0xc5, 0x66, 0x53, 0x65, 0xe3, 0x4b, 0xa6, 0x64, 0x10, 0xcb, 0x73, 0x36, 0x46,
	0xd9, 0x12, 0xbd, 0x14, 0x23, 0xf4, 0x70, 0x13, 0x22, 0x1c, 0xff, 0x07, 0xf5, 0xde, 0x5c, 0xbd,
	0x87, 0x1e, 0x55, 0xb6, 0xcc, 0xc4, 0x9b, 0xaa, 0xa4, 0x49, 0xf6, 0x76, 0xf9, 0xdd, 0xcd, 0xe2,
	0xbb, 0x9b, 0x65, 0x96, 0xe8, 0x6e, 0x17, 0x6f, 0xfd, 0x1d, 0x4b, 0xf4, 0xae, 0xc8, 0x12, 0xbd,
	0x8b, 0x1e, 0xcb, 0xdb, 0x05, 0xd6, 0x72, 0x0d, 0x82, 0xb7, 0x01, 0x46, 0xb3, 0xa9, 0xd2, 0x14,
	0x60, 0xcb, 0x20, 0x4e, 0xd3, 0x2f, 0xd8, 0xe8, 0x50, 0xde, 0x60, 0xf8, 0x05, 0xab, 0x12, 0x46,
	0x80, 0xd5, 0xd3, 0xf3, 0x03, 0x95, 0x83, 0xb3, 0x03, 0x2b, 0xf4, 0x92, 0xbb, 0xf2, 0x91, 0xf9,
	0xbf, 0x42, 0x7d, 0xfe, 0xf1, 0x64, 0x62, 0x53, 0xe3, 0x8c, 0xcd, 0x4b, 0x36, 0x35, 0xd8, 0x02,
	0x3d, 0x98, 0xab, 0x13, 0xbc, 0x03, 0x23, 0xbb, 0x36, 0x77, 0x24, 0x99, 0x23, 0x11, 0xd3, 0x30,
	0xf1, 0xee, 0xad, 0xa4, 0x61, 0x66, 0xea, 0xa6, 0x98, 0x86, 0x85, 0xf7, 0x54, 0x49, 0x6b, 0x88,
	0x69, 0x58, 0x99, 0xa3, 0x85, 0x1e, 0xf1, 0xd3, 0x1e, 0xd3, 0x61, 0x98, 0x04, 0xaf, 0xd9, 0x96,
	0xdc, 0x83, 0xb9, 0xb8, 0x23, 0x4c, 0x8b, 0xcf, 0xd3, 0x1f, 0x0d, 0x38, 0xd1, 0xb9, 0x85, 0xba,
	0x25, 0x96, 0x60, 0x0c, 0xec, 0x56, 0x89, 0x23, 0x05, 0x8e, 0xa0, 0x63, 0xce, 0x0d, 0x82, 0x7e,
	0x74, 0x35, 0x80, 0x59, 0x7c, 0x1f, 0xb8, 0xdd, 0x34, 0x26, 0xeb, 0x94, 0x2f, 0xf2, 0x1f, 0xa1,
	0x53, 0xe6, 0x26, 0x7a, 0xc2, 0xbb, 0x8c, 0xd3, 0x69, 0xce, 0xfb, 0xc0, 0xef, 0xa5, 0x7c, 0x33,
	0xe7, 0x79, 0xd6, 0x4d, 0xbf, 0x60, 0xa3, 0xe3, 0x8a, 0x02, 0xc1, 0xff, 0x07, 0x05, 0x54, 0xa1,
	0x49, 0x89, 0x26, 0xe8, 0x3b, 0x9e, 0xfd, 0x64, 0xe0, 0xc5, 0x31, 0x6f, 0xa2, 0xb7, 0xa0, 0x7a,
	0x9f, 0xfc, 0xdb, 0xea, 0xb1, 0xad, 0xfa, 0x2a, 0x55, 0xe3, 0x5b, 0x9c, 0x5b, 0xd9, 0x16, 0xe7,
	0xc1, 0x08, 0x7e, 0x1b, 0x7a, 0x6a, 0xab, 0xc4, 0x91, 0x02, 0x57, 0x4d, 0xd2, 0xc4, 0xad, 0xdb,
	0x4b, 0xd2, 0x2c, 0x04, 0x33, 0x2b, 0x49, 0x5a, 0x58, 0x81, 0x8e, 0x2b, 0x27, 0x69, 0x15, 0x38,
	0x8b, 0x71, 0x97, 0xde, 0x64, 0xce, 0x3d, 0xc4, 0xaa, 0x2a, 0x69, 0xeb, 0x9c, 0x7b, 0xea, 0x4d,
	0x32, 0xcf, 0x87, 0x4e, 0xfd, 0x52, 0xb0, 0x50, 0x28, 0x37, 0xa2, 0x02, 0xf6, 0x4e, 0xe1, 0x7e,
	0xf1, 0xd1, 0x4d, 0xdf, 0xcd, 0xa6, 0x94, 0x0d, 0xc2, 0xda, 0x99, 0x10, 0xa9, 0x16, 0x09, 0x81,
	0xd2, 0xeb, 0x02, 0xab, 0x3b, 0x3e, 0xa8, 0x5c, 0x17, 0xce, 0x83, 0xd7, 0x09, 0x1c, 0x24, 0xb6,
	0x40, 0x5f, 0xcb, 0x9b, 0xe0, 0x9b, 0x7d, 0x13, 0x5d, 0x03, 0xbf, 0xbb, 0xf0, 0xbb, 0xb9, 0x9b,
	0x76, 0x7b, 0xfe, 0x84, 0x7f, 0x90, 0x59, 0xc7, 0xcf, 0x1f, 0xa1, 0x6f, 0xca, 0xd2, 0x04, 0xbf,
	0xb7, 0x50, 0xfa, 0xbe, 0x70, 0x98, 0xf2, 0xa7, 0xa4, 0x2a, 0x4f, 0x90, 0x29, 0x37, 0xb8, 0xfc,
	0xf0, 0x0d, 0xef, 0xe7, 0xf7, 0xa1, 0xc5, 0x36, 0xd9, 0xd6, 0x00, 0x0c, 0xcf, 0x0d, 0xa7, 0xe6,
	0xcf, 0x8d, 0x0c, 0xfa, 0xde, 0x1b, 0xfb, 0x97, 0xde, 0xd8, 0x35, 0xf0, 0x07, 0x7c, 0x7f, 0x52,
	0xe8, 0x39, 0x7f, 0xce, 0xa1, 0xcc, 0x40, 0x8f, 0xf9, 0x8b, 0xe4, 0x90, 0xae, 0xe3, 0x07, 0x95,
	0x93, 0x9f, 0x79, 0xa7, 0x9f, 0xf3, 0xb9, 0x99, 0xf5, 0x59, 0x8e, 0x77, 0xb1, 0x56, 0x98, 0x37,
	0x99, 0x6b, 0x17, 0xfa, 0x2c, 0xb7, 0x50, 0x9b, 0xdf, 0xbc, 0xd2, 0x44, 0x0f, 0x39, 0x23, 0xdc,
	0xd6, 0x4e, 0x20, 0x53, 0x56, 0x6a, 0x58, 0xa1, 0x23, 0xc1, 0x9f, 0xe0, 0x23, 0xf0, 0xaf, 0x0b,
	0xbe, 0x24, 0xf7, 0x25, 0x07, 0xb6, 0xbc, 0x2b, 0x5c, 0xd5, 0x4f, 0x68, 0x1c, 0x07, 0x7e, 0x12,
	0xd1, 0x21, 0x3a, 0x94, 0x57, 0x4e, 0xbd, 0xc4, 0xc3, 0x92, 0xba, 0xac, 0xd5, 0xc8, 0x6e, 0x3b,
	0xfb, 0xb7, 0xd0, 0x16, 0xdc, 0x1d, 0x70, 0xb1, 0x5b, 0xd7, 0x7f, 0xb4, 0xee, 0x5c, 0xcf, 0x5a,
	0xd2, 0x2f, 0xb3, 0x96, 0xf4, 0xfb, 0xac, 0x25, 0xfd, 0xfc, 0x67, 0xeb, 0xce, 0x8b, 0xfc, 0xff,
	0x45, 0x6f, 0x15, 0xca, 0x6b, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x64, 0x88, 0x53, 0xd5, 0x8a,
	0x0c, 0x00, 0x00,
}
